
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000624  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000698  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bb3  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba4  00000000  00000000  00002447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f6a  00000000  00000000  00002feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  00003f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000674  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b80  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3a c0       	rjmp	.+116    	; 0x76 <__ctors_end>
   2:	49 c0       	rjmp	.+146    	; 0x96 <__bad_interrupt>
   4:	48 c0       	rjmp	.+144    	; 0x96 <__bad_interrupt>
   6:	47 c0       	rjmp	.+142    	; 0x96 <__bad_interrupt>
   8:	46 c0       	rjmp	.+140    	; 0x96 <__bad_interrupt>
   a:	45 c0       	rjmp	.+138    	; 0x96 <__bad_interrupt>
   c:	44 c0       	rjmp	.+136    	; 0x96 <__bad_interrupt>
   e:	43 c0       	rjmp	.+134    	; 0x96 <__bad_interrupt>
  10:	42 c0       	rjmp	.+132    	; 0x96 <__bad_interrupt>
  12:	41 c0       	rjmp	.+130    	; 0x96 <__bad_interrupt>
  14:	40 c0       	rjmp	.+128    	; 0x96 <__bad_interrupt>
  16:	3f c0       	rjmp	.+126    	; 0x96 <__bad_interrupt>
  18:	3e c0       	rjmp	.+124    	; 0x96 <__bad_interrupt>
  1a:	3d c0       	rjmp	.+122    	; 0x96 <__bad_interrupt>
  1c:	3c c0       	rjmp	.+120    	; 0x96 <__bad_interrupt>
  1e:	3b c0       	rjmp	.+118    	; 0x96 <__bad_interrupt>
  20:	3a c0       	rjmp	.+116    	; 0x96 <__bad_interrupt>
  22:	39 c0       	rjmp	.+114    	; 0x96 <__bad_interrupt>
  24:	38 c0       	rjmp	.+112    	; 0x96 <__bad_interrupt>

00000026 <NUM_MEM>:
  26:	00 00 3c 42 42 3c 00 00 00 00 00 04 7e 00 00 00     ..<BB<......~...
  36:	00 00 64 52 4a 44 00 00 00 00 24 42 4a 34 00 00     ..dRJD....$BJ4..
  46:	00 00 10 18 74 12 00 00 00 00 24 4a 4a 32 00 00     ....t.....$JJ2..
  56:	00 00 38 54 52 20 00 00 00 00 44 22 12 0c 00 00     ..8TR ....D"....
  66:	00 00 34 4a 4a 34 00 00 00 00 24 4a 4a 34 00 00     ..4JJ4....$JJ4..

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d4 e0       	ldi	r29, 0x04	; 4
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a8 36       	cpi	r26, 0x68	; 104
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0c d0       	rcall	.+24     	; 0xac <main>
  94:	c5 c2       	rjmp	.+1418   	; 0x620 <_exit>

00000096 <__bad_interrupt>:
  96:	b4 cf       	rjmp	.-152    	; 0x0 <__vectors>

00000098 <init>:

void init()
{
	// SCK MOSI CS/LOAD/SS
	//Set SCK, MOSI, SS as outputs
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI)|(1 << PIN_SS);
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	8c 62       	ori	r24, 0x2C	; 44
  9c:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1 << PIN_SS_1) | (1 << PIN_SS_2);
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	80 6c       	ori	r24, 0xC0	; 192
  a2:	81 bb       	out	0x11, r24	; 17

	// SPI Enable, Master mode
	//Enable SPI as master.
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
  a4:	8d b1       	in	r24, 0x0d	; 13
  a6:	82 65       	ori	r24, 0x52	; 82
  a8:	8d b9       	out	0x0d, r24	; 13
  aa:	08 95       	ret

000000ac <main>:
}

int main(void)
{
    /* Replace with your application code */
	init();
  ac:	f5 df       	rcall	.-22     	; 0x98 <init>
	initMax7219(0);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	70 d0       	rcall	.+224    	; 0x192 <initMax7219>
	initMax7219(1);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	6e d0       	rcall	.+220    	; 0x192 <initMax7219>
	//double az_buffer = az/MPU6050_ACCEL_LSB_16;
	
	float lastTime = 0.0f;
	#endif
	
	mpu6050_init();
  b6:	b3 d1       	rcall	.+870    	; 0x41e <mpu6050_init>
	
	int i = 0;
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
		//mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
		
		
		//displayValue(gx ,1);
		#endif
		displayNumberFromMemory(i, 1);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	8c 2f       	mov	r24, r28
  c0:	ad d0       	rcall	.+346    	; 0x21c <displayNumberFromMemory>
		i++;
  c2:	21 96       	adiw	r28, 0x01	; 1
		if(i >= 10) i = 0;
  c4:	ca 30       	cpi	r28, 0x0A	; 10
  c6:	d1 05       	cpc	r29, r1
  c8:	14 f0       	brlt	.+4      	; 0xce <main+0x22>
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  cc:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f e9       	ldi	r18, 0x9F	; 159
  d0:	86 e8       	ldi	r24, 0x86	; 134
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x28>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x32>
  de:	00 00       	nop
  e0:	ed cf       	rjmp	.-38     	; 0xbc <main+0x10>

000000e2 <spiSendByteMax7219>:
void blinkMax7219(uint8_t device)
{
	fillMax7219(device);
	_delay_ms(100);
	clearMax7219(device);
}
  e2:	8f b9       	out	0x0f, r24	; 15
  e4:	77 9b       	sbis	0x0e, 7	; 14
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <spiSendByteMax7219+0x2>
  e8:	08 95       	ret

000000ea <writeDataMax7219OnDevice>:
  ea:	cf 93       	push	r28
  ec:	c6 2f       	mov	r28, r22
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	97 7f       	andi	r25, 0xF7	; 247
  f2:	98 bb       	out	0x18, r25	; 24
  f4:	98 b3       	in	r25, 0x18	; 24
  f6:	9b 7f       	andi	r25, 0xFB	; 251
  f8:	98 bb       	out	0x18, r25	; 24
  fa:	41 11       	cpse	r20, r1
  fc:	09 c0       	rjmp	.+18     	; 0x110 <writeDataMax7219OnDevice+0x26>
  fe:	92 b3       	in	r25, 0x12	; 18
 100:	90 68       	ori	r25, 0x80	; 128
 102:	92 bb       	out	0x12, r25	; 18
 104:	87 9b       	sbis	0x10, 7	; 16
 106:	fe cf       	rjmp	.-4      	; 0x104 <writeDataMax7219OnDevice+0x1a>
 108:	92 b3       	in	r25, 0x12	; 18
 10a:	9f 7b       	andi	r25, 0xBF	; 191
 10c:	92 bb       	out	0x12, r25	; 18
 10e:	08 c0       	rjmp	.+16     	; 0x120 <writeDataMax7219OnDevice+0x36>
 110:	92 b3       	in	r25, 0x12	; 18
 112:	90 64       	ori	r25, 0x40	; 64
 114:	92 bb       	out	0x12, r25	; 18
 116:	86 9b       	sbis	0x10, 6	; 16
 118:	fe cf       	rjmp	.-4      	; 0x116 <writeDataMax7219OnDevice+0x2c>
 11a:	92 b3       	in	r25, 0x12	; 18
 11c:	9f 77       	andi	r25, 0x7F	; 127
 11e:	92 bb       	out	0x12, r25	; 18
 120:	e0 df       	rcall	.-64     	; 0xe2 <spiSendByteMax7219>
 122:	8c 2f       	mov	r24, r28
 124:	de df       	rcall	.-68     	; 0xe2 <spiSendByteMax7219>
 126:	88 b3       	in	r24, 0x18	; 24
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	88 bb       	out	0x18, r24	; 24
 12c:	82 b3       	in	r24, 0x12	; 18
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	82 bb       	out	0x12, r24	; 18
 132:	82 b3       	in	r24, 0x12	; 18
 134:	80 68       	ori	r24, 0x80	; 128
 136:	82 bb       	out	0x12, r24	; 18
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	87 7f       	andi	r24, 0xF7	; 247
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <setColMax7219>:
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	d2 df       	rcall	.-92     	; 0xea <writeDataMax7219OnDevice>
 146:	08 95       	ret

00000148 <clearMax7219>:
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	d8 2f       	mov	r29, r24
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	0a c0       	rjmp	.+20     	; 0x168 <clearMax7219+0x20>
 154:	cf 5f       	subi	r28, 0xFF	; 255
 156:	4d 2f       	mov	r20, r29
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c 2f       	mov	r24, r28
 15c:	c6 df       	rcall	.-116    	; 0xea <writeDataMax7219OnDevice>
 15e:	01 c0       	rjmp	.+2      	; 0x162 <clearMax7219+0x1a>
 160:	c0 e0       	ldi	r28, 0x00	; 0
 162:	c8 30       	cpi	r28, 0x08	; 8
 164:	b8 f3       	brcs	.-18     	; 0x154 <clearMax7219+0xc>
 166:	1f 5f       	subi	r17, 0xFF	; 255
 168:	13 30       	cpi	r17, 0x03	; 3
 16a:	d0 f3       	brcs	.-12     	; 0x160 <clearMax7219+0x18>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	08 95       	ret

00000174 <fillMax7219>:
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	d8 2f       	mov	r29, r24
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	05 c0       	rjmp	.+10     	; 0x188 <fillMax7219+0x14>
 17e:	cf 5f       	subi	r28, 0xFF	; 255
 180:	4d 2f       	mov	r20, r29
 182:	6f e7       	ldi	r22, 0x7F	; 127
 184:	8c 2f       	mov	r24, r28
 186:	b1 df       	rcall	.-158    	; 0xea <writeDataMax7219OnDevice>
 188:	c8 30       	cpi	r28, 0x08	; 8
 18a:	c8 f3       	brcs	.-14     	; 0x17e <fillMax7219+0xa>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <initMax7219>:

void initMax7219(uint8_t device) 
{
 192:	cf 93       	push	r28
 194:	c8 2f       	mov	r28, r24
		clearMax7219(device);
 196:	d8 df       	rcall	.-80     	; 0x148 <clearMax7219>
		
		writeDataMax7219OnDevice(MAX7219_SHUTDOWN, 1,device);
 198:	4c 2f       	mov	r20, r28
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	8c e0       	ldi	r24, 0x0C	; 12
 19e:	a5 df       	rcall	.-182    	; 0xea <writeDataMax7219OnDevice>
		writeDataMax7219OnDevice(MAX7219_DECODE_MODE, 0,device);
 1a0:	4c 2f       	mov	r20, r28
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	89 e0       	ldi	r24, 0x09	; 9
 1a6:	a1 df       	rcall	.-190    	; 0xea <writeDataMax7219OnDevice>
		writeDataMax7219OnDevice(MAX7219_SCAN_LIMIT, 7,device);
 1a8:	4c 2f       	mov	r20, r28
 1aa:	67 e0       	ldi	r22, 0x07	; 7
 1ac:	8b e0       	ldi	r24, 0x0B	; 11
 1ae:	9d df       	rcall	.-198    	; 0xea <writeDataMax7219OnDevice>
		writeDataMax7219OnDevice(MAX7219_INTENSITY, 1,device);
 1b0:	4c 2f       	mov	r20, r28
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	8a e0       	ldi	r24, 0x0A	; 10
 1b6:	99 df       	rcall	.-206    	; 0xea <writeDataMax7219OnDevice>
		writeDataMax7219OnDevice(MAX7219_DISPLAYTEST, 0,device);
 1b8:	4c 2f       	mov	r20, r28
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	95 df       	rcall	.-214    	; 0xea <writeDataMax7219OnDevice>
 1c0:	87 e8       	ldi	r24, 0x87	; 135
 1c2:	93 e1       	ldi	r25, 0x13	; 19
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <initMax7219+0x32>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <initMax7219+0x38>
 1ca:	00 00       	nop

		_delay_ms(20);
}
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <blankNumber>:
}
*/

void blankNumber(void)
{
	for(uint8_t i = 0; i < DISPLAY_SIZE; i++)
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <blankNumber+0x10>
		numberMemory[i] = 0;
 1d4:	e8 2f       	mov	r30, r24
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	e0 5a       	subi	r30, 0xA0	; 160
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	10 82       	st	Z, r1
}
*/

void blankNumber(void)
{
	for(uint8_t i = 0; i < DISPLAY_SIZE; i++)
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	88 30       	cpi	r24, 0x08	; 8
 1e2:	c0 f3       	brcs	.-16     	; 0x1d4 <blankNumber+0x4>
		numberMemory[i] = 0;
}
 1e4:	08 95       	ret

000001e6 <readNumberFromMemory>:

void readNumberFromMemory(uint8_t number)
{
 1e6:	cf 93       	push	r28
	uint8_t memoryIterator = number * 8;
 1e8:	c8 2f       	mov	r28, r24
 1ea:	cc 0f       	add	r28, r28
 1ec:	cc 0f       	add	r28, r28
 1ee:	cc 0f       	add	r28, r28
	uint8_t numberIterator = 0;
	
	blankNumber();
 1f0:	ef df       	rcall	.-34     	; 0x1d0 <blankNumber>
}

void readNumberFromMemory(uint8_t number)
{
	uint8_t memoryIterator = number * 8;
	uint8_t numberIterator = 0;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
	
	blankNumber();
	
	while(numberIterator < 8 && memoryIterator < NUM_MEM_SIZE)
 1f4:	0d c0       	rjmp	.+26     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
	{
		numberMemory[numberIterator] = pgm_read_byte(&NUM_MEM[memoryIterator]);
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	ec 2f       	mov	r30, r28
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ea 5d       	subi	r30, 0xDA	; 218
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	e4 91       	lpm	r30, Z
 204:	d9 01       	movw	r26, r18
 206:	a0 5a       	subi	r26, 0xA0	; 160
 208:	bf 4f       	sbci	r27, 0xFF	; 255
 20a:	ec 93       	st	X, r30
		numberIterator++;
 20c:	8f 5f       	subi	r24, 0xFF	; 255
		memoryIterator++;
 20e:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t memoryIterator = number * 8;
	uint8_t numberIterator = 0;
	
	blankNumber();
	
	while(numberIterator < 8 && memoryIterator < NUM_MEM_SIZE)
 210:	88 30       	cpi	r24, 0x08	; 8
 212:	10 f4       	brcc	.+4      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 214:	c0 35       	cpi	r28, 0x50	; 80
 216:	78 f3       	brcs	.-34     	; 0x1f6 <readNumberFromMemory+0x10>
	{
		numberMemory[numberIterator] = pgm_read_byte(&NUM_MEM[memoryIterator]);
		numberIterator++;
		memoryIterator++;
	}
}
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <displayNumberFromMemory>:

void displayNumberFromMemory(uint8_t number, uint8_t device)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	d6 2f       	mov	r29, r22
	if(number*8 >= NUM_MEM_SIZE)
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	20 35       	cpi	r18, 0x50	; 80
 234:	31 05       	cpc	r19, r1
 236:	1c f0       	brlt	.+6      	; 0x23e <displayNumberFromMemory+0x22>
	{
		fillMax7219(device);
 238:	86 2f       	mov	r24, r22
 23a:	9c df       	rcall	.-200    	; 0x174 <fillMax7219>
		return;
 23c:	0e c0       	rjmp	.+28     	; 0x25a <displayNumberFromMemory+0x3e>
	}
	
	//clearMax7219();
	readNumberFromMemory(number);
 23e:	d3 df       	rcall	.-90     	; 0x1e6 <readNumberFromMemory>
	for(uint8_t c = 0; c < DISPLAY_SIZE; c++)
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	09 c0       	rjmp	.+18     	; 0x256 <displayNumberFromMemory+0x3a>
	{
		setColMax7219(c, numberMemory[c], device);
 244:	ec 2f       	mov	r30, r28
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	e0 5a       	subi	r30, 0xA0	; 160
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	4d 2f       	mov	r20, r29
 24e:	60 81       	ld	r22, Z
 250:	8c 2f       	mov	r24, r28
 252:	77 df       	rcall	.-274    	; 0x142 <setColMax7219>
		return;
	}
	
	//clearMax7219();
	readNumberFromMemory(number);
	for(uint8_t c = 0; c < DISPLAY_SIZE; c++)
 254:	cf 5f       	subi	r28, 0xFF	; 255
 256:	c8 30       	cpi	r28, 0x08	; 8
 258:	a8 f3       	brcs	.-22     	; 0x244 <displayNumberFromMemory+0x28>
		setColMax7219(c, numberMemory[c], device);
		//setColMax7219(c, numberMemory[c]);
		//setColMax7219(c, numberMemory[c]);
	}
		
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	66 23       	and	r22, r22
 26c:	49 f1       	breq	.+82     	; 0x2c0 <mpu6050_readBytes+0x60>
 26e:	8a 01       	movw	r16, r20
 270:	d6 2f       	mov	r29, r22
 272:	c8 2f       	mov	r28, r24
 274:	80 ed       	ldi	r24, 0xD0	; 208
 276:	01 d1       	rcall	.+514    	; 0x47a <i2c_start>
 278:	8c 2f       	mov	r24, r28
 27a:	6b d1       	rcall	.+726    	; 0x552 <i2c_write>
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	8a 95       	dec	r24
 280:	f1 f7       	brne	.-4      	; 0x27e <mpu6050_readBytes+0x1e>
 282:	00 00       	nop
 284:	81 ed       	ldi	r24, 0xD1	; 209
 286:	f9 d0       	rcall	.+498    	; 0x47a <i2c_start>
 288:	f1 2c       	mov	r15, r1
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	15 c0       	rjmp	.+42     	; 0x2b8 <mpu6050_readBytes+0x58>
 28e:	f3 94       	inc	r15
 290:	2c 2f       	mov	r18, r28
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	8d 2f       	mov	r24, r29
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	28 17       	cp	r18, r24
 29c:	39 07       	cpc	r19, r25
 29e:	31 f4       	brne	.+12     	; 0x2ac <mpu6050_readBytes+0x4c>
 2a0:	9f d1       	rcall	.+830    	; 0x5e0 <i2c_readNak>
 2a2:	f8 01       	movw	r30, r16
 2a4:	ec 0f       	add	r30, r28
 2a6:	f1 1d       	adc	r31, r1
 2a8:	80 83       	st	Z, r24
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <mpu6050_readBytes+0x56>
 2ac:	79 d1       	rcall	.+754    	; 0x5a0 <i2c_readAck>
 2ae:	f8 01       	movw	r30, r16
 2b0:	ec 0f       	add	r30, r28
 2b2:	f1 1d       	adc	r31, r1
 2b4:	80 83       	st	Z, r24
 2b6:	cf 5f       	subi	r28, 0xFF	; 255
 2b8:	cd 17       	cp	r28, r29
 2ba:	48 f3       	brcs	.-46     	; 0x28e <mpu6050_readBytes+0x2e>
 2bc:	33 d1       	rcall	.+614    	; 0x524 <i2c_stop>
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <mpu6050_readBytes+0x62>
 2c0:	f1 2c       	mov	r15, r1
 2c2:	8f 2d       	mov	r24, r15
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	08 95       	ret

000002d0 <mpu6050_readByte>:
 2d0:	ab 01       	movw	r20, r22
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	c5 df       	rcall	.-118    	; 0x260 <mpu6050_readBytes>
 2d6:	08 95       	ret

000002d8 <mpu6050_writeBytes>:
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	66 23       	and	r22, r22
 2e2:	91 f0       	breq	.+36     	; 0x308 <mpu6050_writeBytes+0x30>
 2e4:	8a 01       	movw	r16, r20
 2e6:	d6 2f       	mov	r29, r22
 2e8:	c8 2f       	mov	r28, r24
 2ea:	80 ed       	ldi	r24, 0xD0	; 208
 2ec:	c6 d0       	rcall	.+396    	; 0x47a <i2c_start>
 2ee:	8c 2f       	mov	r24, r28
 2f0:	30 d1       	rcall	.+608    	; 0x552 <i2c_write>
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	06 c0       	rjmp	.+12     	; 0x302 <mpu6050_writeBytes+0x2a>
 2f6:	f8 01       	movw	r30, r16
 2f8:	ec 0f       	add	r30, r28
 2fa:	f1 1d       	adc	r31, r1
 2fc:	80 81       	ld	r24, Z
 2fe:	29 d1       	rcall	.+594    	; 0x552 <i2c_write>
 300:	cf 5f       	subi	r28, 0xFF	; 255
 302:	cd 17       	cp	r28, r29
 304:	c0 f3       	brcs	.-16     	; 0x2f6 <mpu6050_writeBytes+0x1e>
 306:	0e d1       	rcall	.+540    	; 0x524 <i2c_stop>
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	08 95       	ret

00000312 <mpu6050_writeByte>:
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	1f 92       	push	r1
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	69 83       	std	Y+1, r22	; 0x01
 31e:	ae 01       	movw	r20, r28
 320:	4f 5f       	subi	r20, 0xFF	; 255
 322:	5f 4f       	sbci	r21, 0xFF	; 255
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	d8 df       	rcall	.-80     	; 0x2d8 <mpu6050_writeBytes>
 328:	0f 90       	pop	r0
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <mpu6050_writeBits>:
 330:	ef 92       	push	r14
 332:	ff 92       	push	r15
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	44 23       	and	r20, r20
 344:	81 f1       	breq	.+96     	; 0x3a6 <mpu6050_writeBits+0x76>
 346:	e2 2e       	mov	r14, r18
 348:	14 2f       	mov	r17, r20
 34a:	06 2f       	mov	r16, r22
 34c:	f8 2e       	mov	r15, r24
 34e:	19 82       	std	Y+1, r1	; 0x01
 350:	be 01       	movw	r22, r28
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	bc df       	rcall	.-136    	; 0x2d0 <mpu6050_readByte>
 358:	88 23       	and	r24, r24
 35a:	29 f1       	breq	.+74     	; 0x3a6 <mpu6050_writeBits+0x76>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	01 2e       	mov	r0, r17
 362:	02 c0       	rjmp	.+4      	; 0x368 <mpu6050_writeBits+0x38>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <mpu6050_writeBits+0x34>
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	40 2f       	mov	r20, r16
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	41 1b       	sub	r20, r17
 374:	51 09       	sbc	r21, r1
 376:	4f 5f       	subi	r20, 0xFF	; 255
 378:	5f 4f       	sbci	r21, 0xFF	; 255
 37a:	04 2e       	mov	r0, r20
 37c:	02 c0       	rjmp	.+4      	; 0x382 <mpu6050_writeBits+0x52>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <mpu6050_writeBits+0x4e>
 386:	2e 2d       	mov	r18, r14
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <mpu6050_writeBits+0x60>
 38c:	22 0f       	add	r18, r18
 38e:	33 1f       	adc	r19, r19
 390:	4a 95       	dec	r20
 392:	e2 f7       	brpl	.-8      	; 0x38c <mpu6050_writeBits+0x5c>
 394:	28 23       	and	r18, r24
 396:	80 95       	com	r24
 398:	69 81       	ldd	r22, Y+1	; 0x01
 39a:	86 23       	and	r24, r22
 39c:	62 2f       	mov	r22, r18
 39e:	68 2b       	or	r22, r24
 3a0:	69 83       	std	Y+1, r22	; 0x01
 3a2:	8f 2d       	mov	r24, r15
 3a4:	b6 df       	rcall	.-148    	; 0x312 <mpu6050_writeByte>
 3a6:	0f 90       	pop	r0
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	08 95       	ret

000003b6 <mpu6050_writeBit>:
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	1f 92       	push	r1
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	18 2f       	mov	r17, r24
 3c8:	06 2f       	mov	r16, r22
 3ca:	f4 2e       	mov	r15, r20
 3cc:	be 01       	movw	r22, r28
 3ce:	6f 5f       	subi	r22, 0xFF	; 255
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255
 3d2:	7e df       	rcall	.-260    	; 0x2d0 <mpu6050_readByte>
 3d4:	ff 20       	and	r15, r15
 3d6:	51 f0       	breq	.+20     	; 0x3ec <mpu6050_writeBit+0x36>
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <mpu6050_writeBit+0x2c>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	0a 95       	dec	r16
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <mpu6050_writeBit+0x28>
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	68 2b       	or	r22, r24
 3ea:	0a c0       	rjmp	.+20     	; 0x400 <__DATA_REGION_LENGTH__>
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <mpu6050_writeBit+0x40>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	0a 95       	dec	r16
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <mpu6050_writeBit+0x3c>
 3fa:	60 95       	com	r22
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	68 23       	and	r22, r24
 400:	69 83       	std	Y+1, r22	; 0x01
 402:	81 2f       	mov	r24, r17
 404:	86 df       	rcall	.-244    	; 0x312 <mpu6050_writeByte>
 406:	0f 90       	pop	r0
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	08 95       	ret

00000414 <mpu6050_setSleepDisabled>:
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	66 e0       	ldi	r22, 0x06	; 6
 418:	8b e6       	ldi	r24, 0x6B	; 107
 41a:	cd df       	rcall	.-102    	; 0x3b6 <mpu6050_writeBit>
 41c:	08 95       	ret

0000041e <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
 41e:	29 d0       	rcall	.+82     	; 0x472 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	8a 95       	dec	r24
 424:	f1 f7       	brne	.-4      	; 0x422 <mpu6050_init+0x4>
 426:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	87 ea       	ldi	r24, 0xA7	; 167
 42a:	91 e6       	ldi	r25, 0x61	; 97
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <mpu6050_init+0xe>
 430:	00 c0       	rjmp	.+0      	; 0x432 <mpu6050_init+0x14>
 432:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
 434:	ef df       	rcall	.-34     	; 0x414 <mpu6050_setSleepDisabled>
 436:	83 ec       	ldi	r24, 0xC3	; 195
 438:	99 e0       	ldi	r25, 0x09	; 9
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <mpu6050_init+0x1c>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <mpu6050_init+0x22>
 440:	00 00       	nop

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability 
	//mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_INTERNAL);
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	43 e0       	ldi	r20, 0x03	; 3
 446:	62 e0       	ldi	r22, 0x02	; 2
 448:	8b e6       	ldi	r24, 0x6B	; 107
 44a:	72 df       	rcall	.-284    	; 0x330 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
 44c:	23 e0       	ldi	r18, 0x03	; 3
 44e:	43 e0       	ldi	r20, 0x03	; 3
 450:	62 e0       	ldi	r22, 0x02	; 2
 452:	8a e1       	ldi	r24, 0x1A	; 26
 454:	6d df       	rcall	.-294    	; 0x330 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
 456:	64 e0       	ldi	r22, 0x04	; 4
 458:	89 e1       	ldi	r24, 0x19	; 25
 45a:	5b df       	rcall	.-330    	; 0x312 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
 45c:	23 e0       	ldi	r18, 0x03	; 3
 45e:	42 e0       	ldi	r20, 0x02	; 2
 460:	64 e0       	ldi	r22, 0x04	; 4
 462:	8b e1       	ldi	r24, 0x1B	; 27
 464:	65 df       	rcall	.-310    	; 0x330 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	42 e0       	ldi	r20, 0x02	; 2
 46a:	64 e0       	ldi	r22, 0x04	; 4
 46c:	8c e1       	ldi	r24, 0x1C	; 28
 46e:	60 df       	rcall	.-320    	; 0x330 <mpu6050_writeBits>
 470:	08 95       	ret

00000472 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 472:	11 b8       	out	0x01, r1	; 1
 474:	8c e0       	ldi	r24, 0x0C	; 12
 476:	80 b9       	out	0x00, r24	; 0
 478:	08 95       	ret

0000047a <i2c_start>:
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	94 ea       	ldi	r25, 0xA4	; 164
 480:	96 bf       	out	0x36, r25	; 54
 482:	4f ef       	ldi	r20, 0xFF	; 255
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <i2c_start+0x16>
 48c:	b9 01       	movw	r22, r18
 48e:	a8 01       	movw	r20, r16
 490:	06 b6       	in	r0, 0x36	; 54
 492:	07 fc       	sbrc	r0, 7
 494:	0c c0       	rjmp	.+24     	; 0x4ae <i2c_start+0x34>
 496:	8a 01       	movw	r16, r20
 498:	9b 01       	movw	r18, r22
 49a:	01 50       	subi	r16, 0x01	; 1
 49c:	11 09       	sbc	r17, r1
 49e:	21 09       	sbc	r18, r1
 4a0:	31 09       	sbc	r19, r1
 4a2:	45 2b       	or	r20, r21
 4a4:	46 2b       	or	r20, r22
 4a6:	47 2b       	or	r20, r23
 4a8:	89 f7       	brne	.-30     	; 0x48c <i2c_start+0x12>
 4aa:	b9 01       	movw	r22, r18
 4ac:	a8 01       	movw	r20, r16
 4ae:	45 2b       	or	r20, r21
 4b0:	46 2b       	or	r20, r22
 4b2:	47 2b       	or	r20, r23
 4b4:	59 f1       	breq	.+86     	; 0x50c <i2c_start+0x92>
 4b6:	91 b1       	in	r25, 0x01	; 1
 4b8:	98 7f       	andi	r25, 0xF8	; 248
 4ba:	98 30       	cpi	r25, 0x08	; 8
 4bc:	11 f0       	breq	.+4      	; 0x4c2 <i2c_start+0x48>
 4be:	90 31       	cpi	r25, 0x10	; 16
 4c0:	39 f5       	brne	.+78     	; 0x510 <i2c_start+0x96>
 4c2:	83 b9       	out	0x03, r24	; 3
 4c4:	84 e8       	ldi	r24, 0x84	; 132
 4c6:	86 bf       	out	0x36, r24	; 54
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	a0 e0       	ldi	r26, 0x00	; 0
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <i2c_start+0x5c>
 4d2:	db 01       	movw	r26, r22
 4d4:	ca 01       	movw	r24, r20
 4d6:	06 b6       	in	r0, 0x36	; 54
 4d8:	07 fc       	sbrc	r0, 7
 4da:	0c c0       	rjmp	.+24     	; 0x4f4 <i2c_start+0x7a>
 4dc:	ac 01       	movw	r20, r24
 4de:	bd 01       	movw	r22, r26
 4e0:	41 50       	subi	r20, 0x01	; 1
 4e2:	51 09       	sbc	r21, r1
 4e4:	61 09       	sbc	r22, r1
 4e6:	71 09       	sbc	r23, r1
 4e8:	89 2b       	or	r24, r25
 4ea:	8a 2b       	or	r24, r26
 4ec:	8b 2b       	or	r24, r27
 4ee:	89 f7       	brne	.-30     	; 0x4d2 <i2c_start+0x58>
 4f0:	db 01       	movw	r26, r22
 4f2:	ca 01       	movw	r24, r20
 4f4:	89 2b       	or	r24, r25
 4f6:	8a 2b       	or	r24, r26
 4f8:	8b 2b       	or	r24, r27
 4fa:	61 f0       	breq	.+24     	; 0x514 <i2c_start+0x9a>
 4fc:	81 b1       	in	r24, 0x01	; 1
 4fe:	88 7f       	andi	r24, 0xF8	; 248
 500:	88 31       	cpi	r24, 0x18	; 24
 502:	51 f0       	breq	.+20     	; 0x518 <i2c_start+0x9e>
 504:	80 34       	cpi	r24, 0x40	; 64
 506:	51 f4       	brne	.+20     	; 0x51c <i2c_start+0xa2>
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	09 c0       	rjmp	.+18     	; 0x51e <i2c_start+0xa4>
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	07 c0       	rjmp	.+14     	; 0x51e <i2c_start+0xa4>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	05 c0       	rjmp	.+10     	; 0x51e <i2c_start+0xa4>
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	03 c0       	rjmp	.+6      	; 0x51e <i2c_start+0xa4>
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	01 c0       	rjmp	.+2      	; 0x51e <i2c_start+0xa4>
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	08 95       	ret

00000524 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 524:	84 e9       	ldi	r24, 0x94	; 148
 526:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	a0 e0       	ldi	r26, 0x00	; 0
 52e:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
 530:	02 c0       	rjmp	.+4      	; 0x536 <i2c_stop+0x12>
 532:	db 01       	movw	r26, r22
 534:	ca 01       	movw	r24, r20
 536:	06 b6       	in	r0, 0x36	; 54
 538:	04 fe       	sbrs	r0, 4
 53a:	0a c0       	rjmp	.+20     	; 0x550 <i2c_stop+0x2c>
 53c:	ac 01       	movw	r20, r24
 53e:	bd 01       	movw	r22, r26
 540:	41 50       	subi	r20, 0x01	; 1
 542:	51 09       	sbc	r21, r1
 544:	61 09       	sbc	r22, r1
 546:	71 09       	sbc	r23, r1
 548:	89 2b       	or	r24, r25
 54a:	8a 2b       	or	r24, r26
 54c:	8b 2b       	or	r24, r27
 54e:	89 f7       	brne	.-30     	; 0x532 <i2c_stop+0xe>
 550:	08 95       	ret

00000552 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 552:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 554:	84 e8       	ldi	r24, 0x84	; 132
 556:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	a0 e0       	ldi	r26, 0x00	; 0
 55e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 560:	02 c0       	rjmp	.+4      	; 0x566 <i2c_write+0x14>
 562:	db 01       	movw	r26, r22
 564:	ca 01       	movw	r24, r20
 566:	06 b6       	in	r0, 0x36	; 54
 568:	07 fc       	sbrc	r0, 7
 56a:	0c c0       	rjmp	.+24     	; 0x584 <i2c_write+0x32>
 56c:	ac 01       	movw	r20, r24
 56e:	bd 01       	movw	r22, r26
 570:	41 50       	subi	r20, 0x01	; 1
 572:	51 09       	sbc	r21, r1
 574:	61 09       	sbc	r22, r1
 576:	71 09       	sbc	r23, r1
 578:	89 2b       	or	r24, r25
 57a:	8a 2b       	or	r24, r26
 57c:	8b 2b       	or	r24, r27
 57e:	89 f7       	brne	.-30     	; 0x562 <i2c_write+0x10>
 580:	db 01       	movw	r26, r22
 582:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
 584:	89 2b       	or	r24, r25
 586:	8a 2b       	or	r24, r26
 588:	8b 2b       	or	r24, r27
 58a:	31 f0       	breq	.+12     	; 0x598 <i2c_write+0x46>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 58c:	81 b1       	in	r24, 0x01	; 1
 58e:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 590:	88 32       	cpi	r24, 0x28	; 40
 592:	21 f0       	breq	.+8      	; 0x59c <i2c_write+0x4a>
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
 59c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 59e:	08 95       	ret

000005a0 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 5a0:	84 ec       	ldi	r24, 0xC4	; 196
 5a2:	86 bf       	out	0x36, r24	; 54
	i2c_timer = I2C_TIMER_DELAY;
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	a0 e0       	ldi	r26, 0x00	; 0
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <i2c_readAck+0x12>
 5ae:	db 01       	movw	r26, r22
 5b0:	ca 01       	movw	r24, r20
 5b2:	06 b6       	in	r0, 0x36	; 54
 5b4:	07 fc       	sbrc	r0, 7
 5b6:	0c c0       	rjmp	.+24     	; 0x5d0 <i2c_readAck+0x30>
 5b8:	ac 01       	movw	r20, r24
 5ba:	bd 01       	movw	r22, r26
 5bc:	41 50       	subi	r20, 0x01	; 1
 5be:	51 09       	sbc	r21, r1
 5c0:	61 09       	sbc	r22, r1
 5c2:	71 09       	sbc	r23, r1
 5c4:	89 2b       	or	r24, r25
 5c6:	8a 2b       	or	r24, r26
 5c8:	8b 2b       	or	r24, r27
 5ca:	89 f7       	brne	.-30     	; 0x5ae <i2c_readAck+0xe>
 5cc:	db 01       	movw	r26, r22
 5ce:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
 5d0:	89 2b       	or	r24, r25
 5d2:	8a 2b       	or	r24, r26
 5d4:	8b 2b       	or	r24, r27
 5d6:	11 f0       	breq	.+4      	; 0x5dc <i2c_readAck+0x3c>
		return 0;

    return TWDR;
 5d8:	83 b1       	in	r24, 0x03	; 3
 5da:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
 5dc:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
 5de:	08 95       	ret

000005e0 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
 5e0:	84 e8       	ldi	r24, 0x84	; 132
 5e2:	86 bf       	out	0x36, r24	; 54
	i2c_timer = I2C_TIMER_DELAY;
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	a0 e0       	ldi	r26, 0x00	; 0
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <i2c_readNak+0x12>
 5ee:	db 01       	movw	r26, r22
 5f0:	ca 01       	movw	r24, r20
 5f2:	06 b6       	in	r0, 0x36	; 54
 5f4:	07 fc       	sbrc	r0, 7
 5f6:	0c c0       	rjmp	.+24     	; 0x610 <i2c_readNak+0x30>
 5f8:	ac 01       	movw	r20, r24
 5fa:	bd 01       	movw	r22, r26
 5fc:	41 50       	subi	r20, 0x01	; 1
 5fe:	51 09       	sbc	r21, r1
 600:	61 09       	sbc	r22, r1
 602:	71 09       	sbc	r23, r1
 604:	89 2b       	or	r24, r25
 606:	8a 2b       	or	r24, r26
 608:	8b 2b       	or	r24, r27
 60a:	89 f7       	brne	.-30     	; 0x5ee <i2c_readNak+0xe>
 60c:	db 01       	movw	r26, r22
 60e:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
 610:	89 2b       	or	r24, r25
 612:	8a 2b       	or	r24, r26
 614:	8b 2b       	or	r24, r27
 616:	11 f0       	breq	.+4      	; 0x61c <i2c_readNak+0x3c>
		return 0;
	
    return TWDR;
 618:	83 b1       	in	r24, 0x03	; 3
 61a:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
 61c:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
