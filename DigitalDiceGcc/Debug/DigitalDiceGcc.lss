
DigitalDiceGcc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ec2  00000f56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800062  00800062  00000f58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024a8  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e40  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001232  00000000  00000000  00004494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  000056c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085f  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002528  00000000  00000000  00006567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00008a8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	36 c0       	rjmp	.+108    	; 0x6e <__ctors_end>
   2:	50 c0       	rjmp	.+160    	; 0xa4 <__bad_interrupt>
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	4e c0       	rjmp	.+156    	; 0xa4 <__bad_interrupt>
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	2a c4       	rjmp	.+2132   	; 0x860 <__vector_5>
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	4a c0       	rjmp	.+148    	; 0xa4 <__bad_interrupt>
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	48 c0       	rjmp	.+144    	; 0xa4 <__bad_interrupt>
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	46 c0       	rjmp	.+140    	; 0xa4 <__bad_interrupt>
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	44 c0       	rjmp	.+136    	; 0xa4 <__bad_interrupt>
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>

0000001e <NUM_MEM>:
  1e:	00 00 3c 42 42 3c 00 00 00 00 00 04 7e 00 00 00     ..<BB<......~...
  2e:	00 00 64 52 4a 44 00 00 00 00 24 42 4a 34 00 00     ..dRJD....$BJ4..
  3e:	00 00 10 18 74 12 00 00 00 00 24 4a 4a 32 00 00     ....t.....$JJ2..
  4e:	00 00 38 54 52 20 00 00 00 00 44 22 12 0c 00 00     ..8TR ....D"....
  5e:	00 00 34 4a 4a 34 00 00 00 00 24 4a 4a 34 00 00     ..4JJ4....$JJ4..

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf e5       	ldi	r28, 0x5F	; 95
  74:	d2 e0       	ldi	r29, 0x02	; 2
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	10 e0       	ldi	r17, 0x00	; 0
  7c:	a0 e6       	ldi	r26, 0x60	; 96
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	e2 ec       	ldi	r30, 0xC2	; 194
  82:	fe e0       	ldi	r31, 0x0E	; 14
  84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 36       	cpi	r26, 0x62	; 98
  8c:	b1 07       	cpc	r27, r17
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	a2 e6       	ldi	r26, 0x62	; 98
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	ab 37       	cpi	r26, 0x7B	; 123
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
  a0:	4d d0       	rcall	.+154    	; 0x13c <main>
  a2:	0d c7       	rjmp	.+3610   	; 0xebe <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <getRandom>:

uint8_t checkControllAngle()
{
	
	
}
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	c2 b7       	in	r28, 0x32	; 50
  b4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <max_value>
  b8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	d0 91 60 00 	lds	r29, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c0:	68 2f       	mov	r22, r24
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	69 1b       	sub	r22, r25
  c6:	71 09       	sbc	r23, r1
  c8:	6f 5f       	subi	r22, 0xFF	; 255
  ca:	7f 4f       	sbci	r23, 0xFF	; 255
  cc:	07 2e       	mov	r0, r23
  ce:	00 0c       	add	r0, r0
  d0:	88 0b       	sbc	r24, r24
  d2:	99 0b       	sbc	r25, r25
  d4:	d5 d5       	rcall	.+2986   	; 0xc80 <__floatsisf>
  d6:	6b 01       	movw	r12, r22
  d8:	7c 01       	movw	r14, r24
  da:	6c 2f       	mov	r22, r28
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	ce d5       	rcall	.+2972   	; 0xc80 <__floatsisf>
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	40 e8       	ldi	r20, 0x80	; 128
  ea:	5b e3       	ldi	r21, 0x3B	; 59
  ec:	7d d6       	rcall	.+3322   	; 0xde8 <__mulsf3>
  ee:	9b 01       	movw	r18, r22
  f0:	ac 01       	movw	r20, r24
  f2:	c7 01       	movw	r24, r14
  f4:	b6 01       	movw	r22, r12
  f6:	78 d6       	rcall	.+3312   	; 0xde8 <__mulsf3>
  f8:	95 d5       	rcall	.+2858   	; 0xc24 <__fixunssfsi>
  fa:	86 2f       	mov	r24, r22
  fc:	8d 0f       	add	r24, r29
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	df 90       	pop	r13
 108:	cf 90       	pop	r12
 10a:	08 95       	ret

0000010c <displayValueOnCube>:

void displayValueOnCube(uint8_t value)
{
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
	displayNumberFromMemory(value , 0);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	d8 d1       	rcall	.+944    	; 0x4c4 <displayNumberFromMemory>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8c e1       	ldi	r24, 0x1C	; 28
 116:	90 e1       	ldi	r25, 0x10	; 16
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <displayValueOnCube+0xc>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <displayValueOnCube+0x12>
 11e:	00 00       	nop
	_delay_ms(1);
	displayNumberFromMemory(value, 1);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	8c 2f       	mov	r24, r28
}
 124:	cf 91       	pop	r28

void displayValueOnCube(uint8_t value)
{
	displayNumberFromMemory(value , 0);
	_delay_ms(1);
	displayNumberFromMemory(value, 1);
 126:	ce c1       	rjmp	.+924    	; 0x4c4 <displayNumberFromMemory>

00000128 <clearCube>:
}

void clearCube()
{
	clearMax7219(0);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	54 d1       	rcall	.+680    	; 0x3d4 <clearMax7219>
 12c:	8c e1       	ldi	r24, 0x1C	; 28
 12e:	90 e1       	ldi	r25, 0x10	; 16
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <clearCube+0x8>
 134:	00 c0       	rjmp	.+0      	; 0x136 <clearCube+0xe>
 136:	00 00       	nop
	_delay_ms(1);
	clearMax7219(1);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	4c c1       	rjmp	.+664    	; 0x3d4 <clearMax7219>

0000013c <main>:
}

int main(void)
{	
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	2e 97       	sbiw	r28, 0x0e	; 14
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61



void init(void)
{
	initTimer();
 150:	9f d3       	rcall	.+1854   	; 0x890 <initTimer>
}

int main(void)
{	
	init();
	initMax7219(0);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	6f d1       	rcall	.+734    	; 0x434 <initMax7219>
	initMax7219(1);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	6d d1       	rcall	.+730    	; 0x434 <initMax7219>
	
	mpu6050_init();
 15a:	11 d3       	rcall	.+1570   	; 0x77e <mpu6050_init>
	
	
	int16_t ax = 0;
 15c:	1c 86       	std	Y+12, r1	; 0x0c
 15e:	1b 86       	std	Y+11, r1	; 0x0b
	int16_t ay = 0;
 160:	1a 86       	std	Y+10, r1	; 0x0a
 162:	19 86       	std	Y+9, r1	; 0x09
	int16_t az = 0;
 164:	18 86       	std	Y+8, r1	; 0x08
 166:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gx = 0;
 168:	1e 82       	std	Y+6, r1	; 0x06
 16a:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gy = 0;
 16c:	1c 82       	std	Y+4, r1	; 0x04
 16e:	1b 82       	std	Y+3, r1	; 0x03
	int16_t gz = 0;
 170:	1a 82       	std	Y+2, r1	; 0x02
 172:	19 82       	std	Y+1, r1	; 0x01
	uint8_t blinking = 0;
	uint8_t control_max_values = 0;
	uint8_t control_min_values = 0;

	float start_control_seconds = -1.0;
	float start_display_seconds = getSeconds();
 174:	98 d3       	rcall	.+1840   	; 0x8a6 <getSeconds>
	int16_t controll_error = 1;
	
	uint8_t rolling = 0;
	uint8_t reset = 0;
	
	int display_value = 0;
 176:	1e 86       	std	Y+14, r1	; 0x0e
 178:	1d 86       	std	Y+13, r1	; 0x0d
	
	uint8_t blinking = 0;
	uint8_t control_max_values = 0;
	uint8_t control_min_values = 0;

	float start_control_seconds = -1.0;
 17a:	91 2c       	mov	r9, r1
 17c:	a1 2c       	mov	r10, r1
 17e:	50 e8       	ldi	r21, 0x80	; 128
 180:	35 2e       	mov	r3, r21
 182:	6f eb       	ldi	r22, 0xBF	; 191
 184:	26 2e       	mov	r2, r22
	double gx_buffer = gx/MPU6050_GYRO_LSB_2000;
	double gy_buffer = gy/MPU6050_GYRO_LSB_2000;
	double gz_buffer = gz/MPU6050_GYRO_LSB_2000;
	
	uint8_t blinking = 0;
	uint8_t control_max_values = 0;
 186:	b1 2c       	mov	r11, r1
	
	double gx_buffer = gx/MPU6050_GYRO_LSB_2000;
	double gy_buffer = gy/MPU6050_GYRO_LSB_2000;
	double gz_buffer = gz/MPU6050_GYRO_LSB_2000;
	
	uint8_t blinking = 0;
 188:	81 2c       	mov	r8, r1
	
	int display_value = 0;
	
	while(1) {

		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
 18a:	9e 01       	movw	r18, r28
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	79 01       	movw	r14, r18
 192:	8e 01       	movw	r16, r28
 194:	0d 5f       	subi	r16, 0xFD	; 253
 196:	1f 4f       	sbci	r17, 0xFF	; 255
 198:	2c 5f       	subi	r18, 0xFC	; 252
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	ae 01       	movw	r20, r28
 19e:	49 5f       	subi	r20, 0xF9	; 249
 1a0:	5f 4f       	sbci	r21, 0xFF	; 255
 1a2:	be 01       	movw	r22, r28
 1a4:	67 5f       	subi	r22, 0xF7	; 247
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255
 1a8:	ce 01       	movw	r24, r28
 1aa:	0b 96       	adiw	r24, 0x0b	; 11
 1ac:	0c d3       	rcall	.+1560   	; 0x7c6 <mpu6050_getRawData>

		ax_buffer = ax/MPU6050_ACCEL_LSB_16; 
 1ae:	6b 85       	ldd	r22, Y+11	; 0x0b
 1b0:	7c 85       	ldd	r23, Y+12	; 0x0c
 1b2:	07 2e       	mov	r0, r23
 1b4:	00 0c       	add	r0, r0
 1b6:	88 0b       	sbc	r24, r24
 1b8:	99 0b       	sbc	r25, r25
 1ba:	62 d5       	rcall	.+2756   	; 0xc80 <__floatsisf>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	5a e3       	ldi	r21, 0x3A	; 58
 1c4:	11 d6       	rcall	.+3106   	; 0xde8 <__mulsf3>
 1c6:	6b 01       	movw	r12, r22
 1c8:	7c 01       	movw	r14, r24
		ay_buffer = ay/MPU6050_ACCEL_LSB_16;
 1ca:	09 85       	ldd	r16, Y+9	; 0x09
 1cc:	1a 85       	ldd	r17, Y+10	; 0x0a
		az_buffer = az/MPU6050_ACCEL_LSB_16;
 1ce:	6f 81       	ldd	r22, Y+7	; 0x07
 1d0:	78 85       	ldd	r23, Y+8	; 0x08
 1d2:	07 2e       	mov	r0, r23
 1d4:	00 0c       	add	r0, r0
 1d6:	88 0b       	sbc	r24, r24
 1d8:	99 0b       	sbc	r25, r25
 1da:	52 d5       	rcall	.+2724   	; 0xc80 <__floatsisf>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	5a e3       	ldi	r21, 0x3A	; 58
 1e4:	01 d6       	rcall	.+3074   	; 0xde8 <__mulsf3>
 1e6:	2b 01       	movw	r4, r22
 1e8:	3c 01       	movw	r6, r24
		
		gx_buffer = gx/MPU6050_GYRO_LSB_2000;
		gy_buffer = gy/MPU6050_GYRO_LSB_2000;
		gz_buffer = gz/MPU6050_GYRO_LSB_2000;

		if(ax_buffer <= controll_angle + controll_error && ax_buffer >= controll_angle - controll_error && az_buffer > 0)
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e4       	ldi	r20, 0x40	; 64
 1f0:	50 ec       	ldi	r21, 0xC0	; 192
 1f2:	c7 01       	movw	r24, r14
 1f4:	b6 01       	movw	r22, r12
 1f6:	aa d4       	rcall	.+2388   	; 0xb4c <__cmpsf2>
 1f8:	18 16       	cp	r1, r24
 1fa:	0c f4       	brge	.+2      	; 0x1fe <main+0xc2>
 1fc:	45 c0       	rjmp	.+138    	; 0x288 <__stack+0x29>
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	40 ea       	ldi	r20, 0xA0	; 160
 204:	50 ec       	ldi	r21, 0xC0	; 192
 206:	c7 01       	movw	r24, r14
 208:	b6 01       	movw	r22, r12
 20a:	ea d5       	rcall	.+3028   	; 0xde0 <__gesf2>
 20c:	87 fd       	sbrc	r24, 7
 20e:	3c c0       	rjmp	.+120    	; 0x288 <__stack+0x29>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	a9 01       	movw	r20, r18
 216:	c3 01       	movw	r24, r6
 218:	b2 01       	movw	r22, r4
 21a:	e2 d5       	rcall	.+3012   	; 0xde0 <__gesf2>
 21c:	18 16       	cp	r1, r24
 21e:	a4 f5       	brge	.+104    	; 0x288 <__stack+0x29>
		{
			control_seconds = getSeconds();
 220:	42 d3       	rcall	.+1668   	; 0x8a6 <getSeconds>
 222:	2b 01       	movw	r4, r22
 224:	3c 01       	movw	r6, r24
			if(start_control_seconds == -1.0) start_control_seconds = control_seconds;
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 e8       	ldi	r20, 0x80	; 128
 22c:	5f eb       	ldi	r21, 0xBF	; 191
 22e:	69 2d       	mov	r22, r9
 230:	7a 2d       	mov	r23, r10
 232:	83 2d       	mov	r24, r3
 234:	92 2d       	mov	r25, r2
 236:	8a d4       	rcall	.+2324   	; 0xb4c <__cmpsf2>
 238:	81 11       	cpse	r24, r1
 23a:	04 c0       	rjmp	.+8      	; 0x244 <__DATA_REGION_LENGTH__+0x44>
 23c:	94 2c       	mov	r9, r4
 23e:	a5 2c       	mov	r10, r5
 240:	36 2c       	mov	r3, r6
 242:	27 2c       	mov	r2, r7

			if(control_seconds - start_control_seconds >= 5.0)
 244:	29 2d       	mov	r18, r9
 246:	3a 2d       	mov	r19, r10
 248:	43 2d       	mov	r20, r3
 24a:	52 2d       	mov	r21, r2
 24c:	b2 01       	movw	r22, r4
 24e:	c3 01       	movw	r24, r6
 250:	18 d4       	rcall	.+2096   	; 0xa82 <__subsf3>
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 ea       	ldi	r20, 0xA0	; 160
 258:	50 e4       	ldi	r21, 0x40	; 64
 25a:	c2 d5       	rcall	.+2948   	; 0xde0 <__gesf2>
 25c:	87 fd       	sbrc	r24, 7
 25e:	2c c0       	rjmp	.+88     	; 0x2b8 <__stack+0x59>
				start_control_seconds = -1.0;
				if(control_max_values == 0)
				{
					control_max_values = 1;
					blinking = 1;
					display_value = max_value;
 260:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <max_value>
			if(start_control_seconds == -1.0) start_control_seconds = control_seconds;

			if(control_seconds - start_control_seconds >= 5.0)
			{
				start_control_seconds = -1.0;
				if(control_max_values == 0)
 264:	b1 10       	cpse	r11, r1
 266:	03 c0       	rjmp	.+6      	; 0x26e <__stack+0xf>
				{
					control_max_values = 1;
					blinking = 1;
 268:	88 24       	eor	r8, r8
 26a:	83 94       	inc	r8
 26c:	71 c0       	rjmp	.+226    	; 0x350 <__stack+0xf1>
				}
				else if (control_max_values == 1)
				{
					control_max_values = 0;
					blinking = 0;
					display_value = (int)(max_value + min_value)/2;
 26e:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 272:	d1 2c       	mov	r13, r1
 274:	c8 0e       	add	r12, r24
 276:	d1 1c       	adc	r13, r1
 278:	c6 01       	movw	r24, r12
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	9e 87       	std	Y+14, r25	; 0x0e
 280:	8d 87       	std	Y+13, r24	; 0x0d

		//displayValue(display_value, 0);
		//displayValue(display_value, 1);
		//display_value = abs(ay_buffer);
		//display_value = abs(ax_buffer);
		displayValueOnCube(display_value);
 282:	8d 85       	ldd	r24, Y+13	; 0x0d
 284:	43 df       	rcall	.-378    	; 0x10c <displayValueOnCube>
 286:	79 cf       	rjmp	.-270    	; 0x17a <main+0x3e>
					blinking = 0;
					display_value = (int)(max_value + min_value)/2;
				}
			}
		}
		else if(az_buffer < 0.0 && control_max_values != 1)
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	a9 01       	movw	r20, r18
 28e:	c3 01       	movw	r24, r6
 290:	b2 01       	movw	r22, r4
 292:	5c d4       	rcall	.+2232   	; 0xb4c <__cmpsf2>
 294:	87 ff       	sbrs	r24, 7
 296:	0a c0       	rjmp	.+20     	; 0x2ac <__stack+0x4d>
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	b9 16       	cp	r11, r25
 29c:	09 f4       	brne	.+2      	; 0x2a0 <__stack+0x41>
 29e:	58 c0       	rjmp	.+176    	; 0x350 <__stack+0xf1>
		{
			display_value = getRandom();
 2a0:	02 df       	rcall	.-508    	; 0xa6 <getRandom>
 2a2:	28 2f       	mov	r18, r24
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	3e 87       	std	Y+14, r19	; 0x0e
 2a8:	2d 87       	std	Y+13, r18	; 0x0d
 2aa:	46 c0       	rjmp	.+140    	; 0x338 <__stack+0xd9>
		}
		else
		{
			start_control_seconds = -1.0;
 2ac:	91 2c       	mov	r9, r1
 2ae:	a1 2c       	mov	r10, r1
 2b0:	20 e8       	ldi	r18, 0x80	; 128
 2b2:	32 2e       	mov	r3, r18
 2b4:	3f eb       	ldi	r19, 0xBF	; 191
 2b6:	23 2e       	mov	r2, r19
		}
		
		if(control_max_values == 1 )
 2b8:	31 e0       	ldi	r19, 0x01	; 1
 2ba:	b3 12       	cpse	r11, r19
 2bc:	3d c0       	rjmp	.+122    	; 0x338 <__stack+0xd9>
	while(1) {

		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);

		ax_buffer = ax/MPU6050_ACCEL_LSB_16; 
		ay_buffer = ay/MPU6050_ACCEL_LSB_16;
 2be:	b8 01       	movw	r22, r16
 2c0:	11 0f       	add	r17, r17
 2c2:	88 0b       	sbc	r24, r24
 2c4:	99 0b       	sbc	r25, r25
 2c6:	dc d4       	rcall	.+2488   	; 0xc80 <__floatsisf>
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	5a e3       	ldi	r21, 0x3A	; 58
 2d0:	8b d5       	rcall	.+2838   	; 0xde8 <__mulsf3>
 2d2:	2b 01       	movw	r4, r22
 2d4:	3c 01       	movw	r6, r24
			start_control_seconds = -1.0;
		}
		
		if(control_max_values == 1 )
		{
			if(ay_buffer >= 5 && (max_value + 1) < 10) max_value++;
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 ea       	ldi	r20, 0xA0	; 160
 2dc:	50 e4       	ldi	r21, 0x40	; 64
 2de:	80 d5       	rcall	.+2816   	; 0xde0 <__gesf2>
 2e0:	87 fd       	sbrc	r24, 7
 2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <__stack+0x97>
 2e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <max_value>
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	09 97       	sbiw	r24, 0x09	; 9
 2ec:	24 f4       	brge	.+8      	; 0x2f6 <__stack+0x97>
 2ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <max_value>
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	16 c0       	rjmp	.+44     	; 0x322 <__stack+0xc3>
			else if(ay_buffer <= -5 && (max_value - 1) > min_value) max_value--;
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	40 ea       	ldi	r20, 0xA0	; 160
 2fc:	50 ec       	ldi	r21, 0xC0	; 192
 2fe:	c3 01       	movw	r24, r6
 300:	b2 01       	movw	r22, r4
 302:	24 d4       	rcall	.+2120   	; 0xb4c <__cmpsf2>
 304:	18 16       	cp	r1, r24
 306:	7c f0       	brlt	.+30     	; 0x326 <__stack+0xc7>
 308:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <max_value>
 30c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	28 17       	cp	r18, r24
 318:	39 07       	cpc	r19, r25
 31a:	2c f4       	brge	.+10     	; 0x326 <__stack+0xc7>
 31c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <max_value>
 320:	81 50       	subi	r24, 0x01	; 1
 322:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <max_value>
			display_value = max_value;
 326:	c0 90 61 00 	lds	r12, 0x0061	; 0x800061 <max_value>
 32a:	8c 2d       	mov	r24, r12
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	9e 87       	std	Y+14, r25	; 0x0e
 330:	8d 87       	std	Y+13, r24	; 0x0d
 332:	bb 24       	eor	r11, r11
 334:	b3 94       	inc	r11
 336:	01 c0       	rjmp	.+2      	; 0x33a <__stack+0xdb>
 338:	b1 2c       	mov	r11, r1

		//displayValue(display_value, 0);
		//displayValue(display_value, 1);
		//display_value = abs(ay_buffer);
		//display_value = abs(ax_buffer);
		displayValueOnCube(display_value);
 33a:	8d 85       	ldd	r24, Y+13	; 0x0d
 33c:	e7 de       	rcall	.-562    	; 0x10c <displayValueOnCube>
		
		if(blinking)
 33e:	88 20       	and	r8, r8
 340:	09 f4       	brne	.+2      	; 0x344 <__stack+0xe5>
 342:	23 cf       	rjmp	.-442    	; 0x18a <main+0x4e>
		{
			//_delay_ms(10);
			clearCube();
 344:	f1 de       	rcall	.-542    	; 0x128 <clearCube>
			displayValueOnCube(display_value);
 346:	8d 85       	ldd	r24, Y+13	; 0x0d
 348:	e1 de       	rcall	.-574    	; 0x10c <displayValueOnCube>
 34a:	88 24       	eor	r8, r8
 34c:	83 94       	inc	r8
 34e:	1d cf       	rjmp	.-454    	; 0x18a <main+0x4e>
		{
			display_value = getRandom();
		}
		else
		{
			start_control_seconds = -1.0;
 350:	91 2c       	mov	r9, r1
 352:	a1 2c       	mov	r10, r1
 354:	80 e8       	ldi	r24, 0x80	; 128
 356:	38 2e       	mov	r3, r24
 358:	9f eb       	ldi	r25, 0xBF	; 191
 35a:	29 2e       	mov	r2, r25
 35c:	b0 cf       	rjmp	.-160    	; 0x2be <__stack+0x5f>

0000035e <setup_SPI>:

void blinkMax7219(uint8_t device)
{
	fillMax7219(device);
	_delay_ms(100);
	clearMax7219(device);
 35e:	8e e1       	ldi	r24, 0x1E	; 30
 360:	87 bb       	out	0x17, r24	; 23
 362:	88 b3       	in	r24, 0x18	; 24
 364:	88 7e       	andi	r24, 0xE8	; 232
 366:	88 bb       	out	0x18, r24	; 24
 368:	88 b3       	in	r24, 0x18	; 24
 36a:	88 61       	ori	r24, 0x18	; 24
 36c:	88 bb       	out	0x18, r24	; 24
 36e:	88 b3       	in	r24, 0x18	; 24
 370:	8c 7f       	andi	r24, 0xFC	; 252
 372:	88 bb       	out	0x18, r24	; 24
 374:	80 e1       	ldi	r24, 0x10	; 16
 376:	8d b9       	out	0x0d, r24	; 13
 378:	08 95       	ret

0000037a <spiSendByteMax7219>:
 37a:	8f b9       	out	0x0f, r24	; 15
 37c:	88 e0       	ldi	r24, 0x08	; 8
 37e:	9d b1       	in	r25, 0x0d	; 13
 380:	93 60       	ori	r25, 0x03	; 3
 382:	9d b9       	out	0x0d, r25	; 13
 384:	68 9a       	sbi	0x0d, 0	; 13
 386:	81 50       	subi	r24, 0x01	; 1
 388:	d1 f7       	brne	.-12     	; 0x37e <spiSendByteMax7219+0x4>
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	8e b9       	out	0x0e, r24	; 14
 38e:	08 95       	ret

00000390 <writeDataMax7219OnDevice>:
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	d8 2f       	mov	r29, r24
 398:	c6 2f       	mov	r28, r22
 39a:	14 2f       	mov	r17, r20
 39c:	e0 df       	rcall	.-64     	; 0x35e <setup_SPI>
 39e:	c0 98       	cbi	0x18, 0	; 24
 3a0:	11 11       	cpse	r17, r1
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <writeDataMax7219OnDevice+0x1e>
 3a4:	c4 9a       	sbi	0x18, 4	; 24
 3a6:	b4 9b       	sbis	0x16, 4	; 22
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <writeDataMax7219OnDevice+0x16>
 3aa:	c3 98       	cbi	0x18, 3	; 24
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <writeDataMax7219OnDevice+0x26>
 3ae:	c3 9a       	sbi	0x18, 3	; 24
 3b0:	b3 9b       	sbis	0x16, 3	; 22
 3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <writeDataMax7219OnDevice+0x20>
 3b4:	c4 98       	cbi	0x18, 4	; 24
 3b6:	8d 2f       	mov	r24, r29
 3b8:	e0 df       	rcall	.-64     	; 0x37a <spiSendByteMax7219>
 3ba:	8c 2f       	mov	r24, r28
 3bc:	de df       	rcall	.-68     	; 0x37a <spiSendByteMax7219>
 3be:	c3 9a       	sbi	0x18, 3	; 24
 3c0:	c4 9a       	sbi	0x18, 4	; 24
 3c2:	c0 98       	cbi	0x18, 0	; 24
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	08 95       	ret

000003cc <setColMax7219>:
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	de cf       	rjmp	.-68     	; 0x390 <writeDataMax7219OnDevice>

000003d4 <clearMax7219>:
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	08 2f       	mov	r16, r24
 3de:	13 e0       	ldi	r17, 0x03	; 3
 3e0:	c1 e0       	ldi	r28, 0x01	; 1
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
 3e4:	40 2f       	mov	r20, r16
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	ce 01       	movw	r24, r28
 3ec:	d1 df       	rcall	.-94     	; 0x390 <writeDataMax7219OnDevice>
 3ee:	21 96       	adiw	r28, 0x01	; 1
 3f0:	c9 30       	cpi	r28, 0x09	; 9
 3f2:	d1 05       	cpc	r29, r1
 3f4:	b9 f7       	brne	.-18     	; 0x3e4 <clearMax7219+0x10>
 3f6:	11 50       	subi	r17, 0x01	; 1
 3f8:	99 f7       	brne	.-26     	; 0x3e0 <clearMax7219+0xc>
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	08 95       	ret

00000404 <fillMax7219>:
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	08 2f       	mov	r16, r24
 40e:	13 e0       	ldi	r17, 0x03	; 3
 410:	c1 e0       	ldi	r28, 0x01	; 1
 412:	d0 e0       	ldi	r29, 0x00	; 0
 414:	40 2f       	mov	r20, r16
 416:	6f e7       	ldi	r22, 0x7F	; 127
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	ce 01       	movw	r24, r28
 41c:	b9 df       	rcall	.-142    	; 0x390 <writeDataMax7219OnDevice>
 41e:	21 96       	adiw	r28, 0x01	; 1
 420:	c9 30       	cpi	r28, 0x09	; 9
 422:	d1 05       	cpc	r29, r1
 424:	b9 f7       	brne	.-18     	; 0x414 <fillMax7219+0x10>
 426:	11 50       	subi	r17, 0x01	; 1
 428:	99 f7       	brne	.-26     	; 0x410 <fillMax7219+0xc>
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	08 95       	ret

00000434 <initMax7219>:
}

void initMax7219(uint8_t device) 
{
 434:	cf 93       	push	r28
 436:	c8 2f       	mov	r28, r24
		clearMax7219(device);
 438:	cd df       	rcall	.-102    	; 0x3d4 <clearMax7219>
		
		writeDataMax7219OnDevice(MAX7219_SHUTDOWN, 1, device);
 43a:	4c 2f       	mov	r20, r28
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	a5 df       	rcall	.-182    	; 0x390 <writeDataMax7219OnDevice>
		writeDataMax7219OnDevice(MAX7219_DECODE_MODE, 0, device);
 446:	4c 2f       	mov	r20, r28
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	89 e0       	ldi	r24, 0x09	; 9
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	9f df       	rcall	.-194    	; 0x390 <writeDataMax7219OnDevice>
		writeDataMax7219OnDevice(MAX7219_SCAN_LIMIT, 7, device);
 452:	4c 2f       	mov	r20, r28
 454:	67 e0       	ldi	r22, 0x07	; 7
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	8b e0       	ldi	r24, 0x0B	; 11
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	99 df       	rcall	.-206    	; 0x390 <writeDataMax7219OnDevice>
		writeDataMax7219OnDevice(MAX7219_INTENSITY, 1, device);
 45e:	4c 2f       	mov	r20, r28
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	8a e0       	ldi	r24, 0x0A	; 10
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	93 df       	rcall	.-218    	; 0x390 <writeDataMax7219OnDevice>
		writeDataMax7219OnDevice(MAX7219_DISPLAYTEST, 0, device);
 46a:	4c 2f       	mov	r20, r28
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	8f e0       	ldi	r24, 0x0F	; 15
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	8d df       	rcall	.-230    	; 0x390 <writeDataMax7219OnDevice>
 476:	87 e8       	ldi	r24, 0x87	; 135
 478:	93 e1       	ldi	r25, 0x13	; 19
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <initMax7219+0x46>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <initMax7219+0x4c>
 480:	00 00       	nop
		
		_delay_ms(20);
}
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <blankNumber>:

void blankNumber(void)
{
 486:	e4 e6       	ldi	r30, 0x64	; 100
 488:	f0 e0       	ldi	r31, 0x00	; 0
	for(uint8_t i = 0; i < DISPLAY_SIZE; i++)
		numberMemory[i] = 0;
 48a:	11 92       	st	Z+, r1
		_delay_ms(20);
}

void blankNumber(void)
{
	for(uint8_t i = 0; i < DISPLAY_SIZE; i++)
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	ec 36       	cpi	r30, 0x6C	; 108
 490:	f8 07       	cpc	r31, r24
 492:	d9 f7       	brne	.-10     	; 0x48a <blankNumber+0x4>
		numberMemory[i] = 0;
}
 494:	08 95       	ret

00000496 <readNumberFromMemory>:

void readNumberFromMemory(uint8_t number)
{
 496:	cf 93       	push	r28
	uint8_t memoryIterator = number * 8;
 498:	c8 2f       	mov	r28, r24
 49a:	cc 0f       	add	r28, r28
 49c:	cc 0f       	add	r28, r28
 49e:	cc 0f       	add	r28, r28
	uint8_t numberIterator = 0;
	
	blankNumber();
 4a0:	f2 df       	rcall	.-28     	; 0x486 <blankNumber>
 4a2:	a4 e6       	ldi	r26, 0x64	; 100
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	88 e0       	ldi	r24, 0x08	; 8
 4a8:	8c 0f       	add	r24, r28
	
	while(numberIterator < 8 && memoryIterator < NUM_MEM_SIZE)
 4aa:	c0 35       	cpi	r28, 0x50	; 80
 4ac:	48 f4       	brcc	.+18     	; 0x4c0 <readNumberFromMemory+0x2a>
	{
		numberMemory[numberIterator] = pgm_read_byte(&NUM_MEM[memoryIterator]);
 4ae:	ec 2f       	mov	r30, r28
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	e2 5e       	subi	r30, 0xE2	; 226
 4b4:	ff 4f       	sbci	r31, 0xFF	; 255
 4b6:	e4 91       	lpm	r30, Z
 4b8:	ed 93       	st	X+, r30
		numberIterator++;
		memoryIterator++;
 4ba:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t memoryIterator = number * 8;
	uint8_t numberIterator = 0;
	
	blankNumber();
	
	while(numberIterator < 8 && memoryIterator < NUM_MEM_SIZE)
 4bc:	c8 13       	cpse	r28, r24
 4be:	f5 cf       	rjmp	.-22     	; 0x4aa <readNumberFromMemory+0x14>
	{
		numberMemory[numberIterator] = pgm_read_byte(&NUM_MEM[memoryIterator]);
		numberIterator++;
		memoryIterator++;
	}
}
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <displayNumberFromMemory>:

void displayNumberFromMemory(uint8_t number, uint8_t device)
{
 4c4:	0f 93       	push	r16
 4c6:	1f 93       	push	r17
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
	if(number*8 >= NUM_MEM_SIZE)
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	93 e0       	ldi	r25, 0x03	; 3
 4d2:	22 0f       	add	r18, r18
 4d4:	33 1f       	adc	r19, r19
 4d6:	9a 95       	dec	r25
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <displayNumberFromMemory+0xe>
 4da:	20 35       	cpi	r18, 0x50	; 80
 4dc:	31 05       	cpc	r19, r1
 4de:	34 f0       	brlt	.+12     	; 0x4ec <displayNumberFromMemory+0x28>
	{
		fillMax7219(device);
 4e0:	86 2f       	mov	r24, r22
		setColMax7219(c, numberMemory[c], device);
		//setColMax7219(c, numberMemory[c]);
		//setColMax7219(c, numberMemory[c]);
	}
		
}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16

void displayNumberFromMemory(uint8_t number, uint8_t device)
{
	if(number*8 >= NUM_MEM_SIZE)
	{
		fillMax7219(device);
 4ea:	8c cf       	rjmp	.-232    	; 0x404 <fillMax7219>
 4ec:	d6 2f       	mov	r29, r22
		return;
	}
	
	//clearMax7219();
	readNumberFromMemory(number);
 4ee:	d3 df       	rcall	.-90     	; 0x496 <readNumberFromMemory>
 4f0:	04 e6       	ldi	r16, 0x64	; 100
 4f2:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t c = 0; c < DISPLAY_SIZE; c++)
 4f4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		setColMax7219(c, numberMemory[c], device);
 4f6:	f8 01       	movw	r30, r16
 4f8:	61 91       	ld	r22, Z+
 4fa:	8f 01       	movw	r16, r30
 4fc:	4d 2f       	mov	r20, r29
 4fe:	8c 2f       	mov	r24, r28
 500:	65 df       	rcall	.-310    	; 0x3cc <setColMax7219>
		return;
	}
	
	//clearMax7219();
	readNumberFromMemory(number);
	for(uint8_t c = 0; c < DISPLAY_SIZE; c++)
 502:	cf 5f       	subi	r28, 0xFF	; 255
 504:	c8 30       	cpi	r28, 0x08	; 8
 506:	b9 f7       	brne	.-18     	; 0x4f6 <displayNumberFromMemory+0x32>
		setColMax7219(c, numberMemory[c], device);
		//setColMax7219(c, numberMemory[c]);
		//setColMax7219(c, numberMemory[c]);
	}
		
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	08 95       	ret

00000512 <mpu6050_writeBytes.part.0>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
 512:	af 92       	push	r10
 514:	bf 92       	push	r11
 516:	cf 92       	push	r12
 518:	df 92       	push	r13
 51a:	ef 92       	push	r14
 51c:	ff 92       	push	r15
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	6a 01       	movw	r12, r20
 52c:	ad b6       	in	r10, 0x3d	; 61
 52e:	be b6       	in	r11, 0x3e	; 62
 530:	26 2f       	mov	r18, r22
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	79 01       	movw	r14, r18
 536:	4f ef       	ldi	r20, 0xFF	; 255
 538:	e4 1a       	sub	r14, r20
 53a:	f4 0a       	sbc	r15, r20
 53c:	2e 5f       	subi	r18, 0xFE	; 254
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
 540:	ed b7       	in	r30, 0x3d	; 61
 542:	fe b7       	in	r31, 0x3e	; 62
 544:	e2 1b       	sub	r30, r18
 546:	f3 0b       	sbc	r31, r19
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	fe bf       	out	0x3e, r31	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	ed bf       	out	0x3d, r30	; 61
 552:	0d b7       	in	r16, 0x3d	; 61
 554:	1e b7       	in	r17, 0x3e	; 62
 556:	0f 5f       	subi	r16, 0xFF	; 255
 558:	1f 4f       	sbci	r17, 0xFF	; 255
 55a:	90 ed       	ldi	r25, 0xD0	; 208
 55c:	91 83       	std	Z+1, r25	; 0x01
 55e:	f8 01       	movw	r30, r16
 560:	81 83       	std	Z+1, r24	; 0x01
 562:	22 e0       	ldi	r18, 0x02	; 2
 564:	82 2f       	mov	r24, r18
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	e8 16       	cp	r14, r24
 56a:	f9 06       	cpc	r15, r25
 56c:	5c f0       	brlt	.+22     	; 0x584 <mpu6050_writeBytes.part.0+0x72>
 56e:	d8 01       	movw	r26, r16
 570:	a8 0f       	add	r26, r24
 572:	b9 1f       	adc	r27, r25
 574:	8c 0d       	add	r24, r12
 576:	9d 1d       	adc	r25, r13
 578:	fc 01       	movw	r30, r24
 57a:	32 97       	sbiw	r30, 0x02	; 2
 57c:	80 81       	ld	r24, Z
 57e:	8c 93       	st	X, r24
 580:	2f 5f       	subi	r18, 0xFF	; 255
 582:	f0 cf       	rjmp	.-32     	; 0x564 <mpu6050_writeBytes.part.0+0x52>
 584:	6e 5f       	subi	r22, 0xFE	; 254
 586:	c8 01       	movw	r24, r16
 588:	d2 d1       	rcall	.+932    	; 0x92e <USI_TWI_Start_Transceiver_With_Data>
 58a:	22 e0       	ldi	r18, 0x02	; 2
 58c:	82 2f       	mov	r24, r18
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	e8 16       	cp	r14, r24
 592:	f9 06       	cpc	r15, r25
 594:	5c f0       	brlt	.+22     	; 0x5ac <mpu6050_writeBytes.part.0+0x9a>
 596:	f6 01       	movw	r30, r12
 598:	e8 0f       	add	r30, r24
 59a:	f9 1f       	adc	r31, r25
 59c:	32 97       	sbiw	r30, 0x02	; 2
 59e:	d8 01       	movw	r26, r16
 5a0:	a8 0f       	add	r26, r24
 5a2:	b9 1f       	adc	r27, r25
 5a4:	8c 91       	ld	r24, X
 5a6:	80 83       	st	Z, r24
 5a8:	2f 5f       	subi	r18, 0xFF	; 255
 5aa:	f0 cf       	rjmp	.-32     	; 0x58c <mpu6050_writeBytes.part.0+0x7a>
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	be be       	out	0x3e, r11	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	ad be       	out	0x3d, r10	; 61
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	df 90       	pop	r13
 5c4:	cf 90       	pop	r12
 5c6:	bf 90       	pop	r11
 5c8:	af 90       	pop	r10
 5ca:	08 95       	ret

000005cc <mpu6050_readBytes>:
 5cc:	7f 92       	push	r7
 5ce:	8f 92       	push	r8
 5d0:	9f 92       	push	r9
 5d2:	af 92       	push	r10
 5d4:	bf 92       	push	r11
 5d6:	cf 92       	push	r12
 5d8:	df 92       	push	r13
 5da:	ef 92       	push	r14
 5dc:	ff 92       	push	r15
 5de:	0f 93       	push	r16
 5e0:	1f 93       	push	r17
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
 5ea:	76 2e       	mov	r7, r22
 5ec:	4a 01       	movw	r8, r20
 5ee:	ed b6       	in	r14, 0x3d	; 61
 5f0:	fe b6       	in	r15, 0x3e	; 62
 5f2:	66 23       	and	r22, r22
 5f4:	b9 f1       	breq	.+110    	; 0x664 <mpu6050_readBytes+0x98>
 5f6:	cd b6       	in	r12, 0x3d	; 61
 5f8:	de b6       	in	r13, 0x3e	; 62
 5fa:	26 2f       	mov	r18, r22
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	59 01       	movw	r10, r18
 600:	42 e0       	ldi	r20, 0x02	; 2
 602:	a4 0e       	add	r10, r20
 604:	b1 1c       	adc	r11, r1
 606:	2d 5f       	subi	r18, 0xFD	; 253
 608:	3f 4f       	sbci	r19, 0xFF	; 255
 60a:	ed b7       	in	r30, 0x3d	; 61
 60c:	fe b7       	in	r31, 0x3e	; 62
 60e:	e2 1b       	sub	r30, r18
 610:	f3 0b       	sbc	r31, r19
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	f8 94       	cli
 616:	fe bf       	out	0x3e, r31	; 62
 618:	0f be       	out	0x3f, r0	; 63
 61a:	ed bf       	out	0x3d, r30	; 61
 61c:	0d b7       	in	r16, 0x3d	; 61
 61e:	1e b7       	in	r17, 0x3e	; 62
 620:	0f 5f       	subi	r16, 0xFF	; 255
 622:	1f 4f       	sbci	r17, 0xFF	; 255
 624:	90 ed       	ldi	r25, 0xD0	; 208
 626:	91 83       	std	Z+1, r25	; 0x01
 628:	f8 01       	movw	r30, r16
 62a:	81 83       	std	Z+1, r24	; 0x01
 62c:	81 ed       	ldi	r24, 0xD1	; 209
 62e:	82 83       	std	Z+2, r24	; 0x02
 630:	63 e0       	ldi	r22, 0x03	; 3
 632:	67 0d       	add	r22, r7
 634:	c8 01       	movw	r24, r16
 636:	c6 d1       	rcall	.+908    	; 0x9c4 <USI_TWI_START_Read_Data>
 638:	23 e0       	ldi	r18, 0x03	; 3
 63a:	82 2f       	mov	r24, r18
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	a8 16       	cp	r10, r24
 640:	b9 06       	cpc	r11, r25
 642:	5c f0       	brlt	.+22     	; 0x65a <mpu6050_readBytes+0x8e>
 644:	f4 01       	movw	r30, r8
 646:	e8 0f       	add	r30, r24
 648:	f9 1f       	adc	r31, r25
 64a:	33 97       	sbiw	r30, 0x03	; 3
 64c:	d8 01       	movw	r26, r16
 64e:	a8 0f       	add	r26, r24
 650:	b9 1f       	adc	r27, r25
 652:	8c 91       	ld	r24, X
 654:	80 83       	st	Z, r24
 656:	2f 5f       	subi	r18, 0xFF	; 255
 658:	f0 cf       	rjmp	.-32     	; 0x63a <mpu6050_readBytes+0x6e>
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	de be       	out	0x3e, r13	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	cd be       	out	0x3d, r12	; 61
 664:	87 2d       	mov	r24, r7
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	f8 94       	cli
 66a:	fe be       	out	0x3e, r15	; 62
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	ed be       	out	0x3d, r14	; 61
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	ff 90       	pop	r15
 67a:	ef 90       	pop	r14
 67c:	df 90       	pop	r13
 67e:	cf 90       	pop	r12
 680:	bf 90       	pop	r11
 682:	af 90       	pop	r10
 684:	9f 90       	pop	r9
 686:	8f 90       	pop	r8
 688:	7f 90       	pop	r7
 68a:	08 95       	ret

0000068c <mpu6050_readByte>:
 68c:	ab 01       	movw	r20, r22
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	9d cf       	rjmp	.-198    	; 0x5cc <mpu6050_readBytes>

00000692 <mpu6050_writeByte>:
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	1f 92       	push	r1
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
 69c:	69 83       	std	Y+1, r22	; 0x01
 69e:	ae 01       	movw	r20, r28
 6a0:	4f 5f       	subi	r20, 0xFF	; 255
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	61 e0       	ldi	r22, 0x01	; 1
 6a6:	35 df       	rcall	.-406    	; 0x512 <mpu6050_writeBytes.part.0>
 6a8:	0f 90       	pop	r0
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <mpu6050_writeBits.part.2>:
 6b0:	ef 92       	push	r14
 6b2:	ff 92       	push	r15
 6b4:	0f 93       	push	r16
 6b6:	1f 93       	push	r17
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	1f 92       	push	r1
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
 6c2:	18 2f       	mov	r17, r24
 6c4:	f6 2e       	mov	r15, r22
 6c6:	e4 2e       	mov	r14, r20
 6c8:	02 2f       	mov	r16, r18
 6ca:	19 82       	std	Y+1, r1	; 0x01
 6cc:	be 01       	movw	r22, r28
 6ce:	6f 5f       	subi	r22, 0xFF	; 255
 6d0:	7f 4f       	sbci	r23, 0xFF	; 255
 6d2:	dc df       	rcall	.-72     	; 0x68c <mpu6050_readByte>
 6d4:	88 23       	and	r24, r24
 6d6:	09 f1       	breq	.+66     	; 0x71a <mpu6050_writeBits.part.2+0x6a>
 6d8:	4f 2d       	mov	r20, r15
 6da:	50 e0       	ldi	r21, 0x00	; 0
 6dc:	4e 19       	sub	r20, r14
 6de:	51 09       	sbc	r21, r1
 6e0:	4f 5f       	subi	r20, 0xFF	; 255
 6e2:	5f 4f       	sbci	r21, 0xFF	; 255
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <mpu6050_writeBits.part.2+0x3e>
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	ea 94       	dec	r14
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <mpu6050_writeBits.part.2+0x3a>
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	04 2e       	mov	r0, r20
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <mpu6050_writeBits.part.2+0x4a>
 6f8:	88 0f       	add	r24, r24
 6fa:	0a 94       	dec	r0
 6fc:	ea f7       	brpl	.-6      	; 0x6f8 <mpu6050_writeBits.part.2+0x48>
 6fe:	20 2f       	mov	r18, r16
 700:	01 c0       	rjmp	.+2      	; 0x704 <mpu6050_writeBits.part.2+0x54>
 702:	22 0f       	add	r18, r18
 704:	4a 95       	dec	r20
 706:	ea f7       	brpl	.-6      	; 0x702 <mpu6050_writeBits.part.2+0x52>
 708:	68 2f       	mov	r22, r24
 70a:	60 95       	com	r22
 70c:	99 81       	ldd	r25, Y+1	; 0x01
 70e:	69 23       	and	r22, r25
 710:	82 23       	and	r24, r18
 712:	68 2b       	or	r22, r24
 714:	69 83       	std	Y+1, r22	; 0x01
 716:	81 2f       	mov	r24, r17
 718:	bc df       	rcall	.-136    	; 0x692 <mpu6050_writeByte>
 71a:	0f 90       	pop	r0
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	0f 91       	pop	r16
 724:	ff 90       	pop	r15
 726:	ef 90       	pop	r14
 728:	08 95       	ret

0000072a <mpu6050_writeBit>:
 72a:	ff 92       	push	r15
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	1f 92       	push	r1
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62
 73a:	18 2f       	mov	r17, r24
 73c:	06 2f       	mov	r16, r22
 73e:	f4 2e       	mov	r15, r20
 740:	be 01       	movw	r22, r28
 742:	6f 5f       	subi	r22, 0xFF	; 255
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	a2 df       	rcall	.-188    	; 0x68c <mpu6050_readByte>
 748:	89 81       	ldd	r24, Y+1	; 0x01
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	01 c0       	rjmp	.+2      	; 0x752 <mpu6050_writeBit+0x28>
 750:	66 0f       	add	r22, r22
 752:	0a 95       	dec	r16
 754:	ea f7       	brpl	.-6      	; 0x750 <mpu6050_writeBit+0x26>
 756:	ff 20       	and	r15, r15
 758:	11 f0       	breq	.+4      	; 0x75e <mpu6050_writeBit+0x34>
 75a:	68 2b       	or	r22, r24
 75c:	02 c0       	rjmp	.+4      	; 0x762 <mpu6050_writeBit+0x38>
 75e:	60 95       	com	r22
 760:	68 23       	and	r22, r24
 762:	69 83       	std	Y+1, r22	; 0x01
 764:	81 2f       	mov	r24, r17
 766:	95 df       	rcall	.-214    	; 0x692 <mpu6050_writeByte>
 768:	0f 90       	pop	r0
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	ff 90       	pop	r15
 774:	08 95       	ret

00000776 <mpu6050_setSleepDisabled>:
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	66 e0       	ldi	r22, 0x06	; 6
 77a:	8b e6       	ldi	r24, 0x6B	; 107
 77c:	d6 cf       	rjmp	.-84     	; 0x72a <mpu6050_writeBit>

0000077e <mpu6050_init>:
 77e:	87 ea       	ldi	r24, 0xA7	; 167
 780:	91 e6       	ldi	r25, 0x61	; 97
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <mpu6050_init+0x4>
 786:	00 c0       	rjmp	.+0      	; 0x788 <mpu6050_init+0xa>
 788:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
 78a:	f5 df       	rcall	.-22     	; 0x776 <mpu6050_setSleepDisabled>
 78c:	83 ec       	ldi	r24, 0xC3	; 195
 78e:	99 e0       	ldi	r25, 0x09	; 9
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <mpu6050_init+0x12>
 794:	00 c0       	rjmp	.+0      	; 0x796 <mpu6050_init+0x18>
 796:	00 00       	nop
 798:	21 e0       	ldi	r18, 0x01	; 1
 79a:	43 e0       	ldi	r20, 0x03	; 3
 79c:	62 e0       	ldi	r22, 0x02	; 2
 79e:	8b e6       	ldi	r24, 0x6B	; 107
 7a0:	87 df       	rcall	.-242    	; 0x6b0 <mpu6050_writeBits.part.2>
 7a2:	23 e0       	ldi	r18, 0x03	; 3
 7a4:	43 e0       	ldi	r20, 0x03	; 3
 7a6:	62 e0       	ldi	r22, 0x02	; 2
 7a8:	8a e1       	ldi	r24, 0x1A	; 26
 7aa:	82 df       	rcall	.-252    	; 0x6b0 <mpu6050_writeBits.part.2>
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
 7ac:	64 e0       	ldi	r22, 0x04	; 4
 7ae:	89 e1       	ldi	r24, 0x19	; 25
 7b0:	70 df       	rcall	.-288    	; 0x692 <mpu6050_writeByte>
 7b2:	23 e0       	ldi	r18, 0x03	; 3
 7b4:	42 e0       	ldi	r20, 0x02	; 2
 7b6:	64 e0       	ldi	r22, 0x04	; 4
 7b8:	8b e1       	ldi	r24, 0x1B	; 27
 7ba:	7a df       	rcall	.-268    	; 0x6b0 <mpu6050_writeBits.part.2>
 7bc:	20 e0       	ldi	r18, 0x00	; 0
 7be:	42 e0       	ldi	r20, 0x02	; 2
 7c0:	64 e0       	ldi	r22, 0x04	; 4
 7c2:	8c e1       	ldi	r24, 0x1C	; 28
 7c4:	75 cf       	rjmp	.-278    	; 0x6b0 <mpu6050_writeBits.part.2>

000007c6 <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 7c6:	8f 92       	push	r8
 7c8:	9f 92       	push	r9
 7ca:	af 92       	push	r10
 7cc:	bf 92       	push	r11
 7ce:	cf 92       	push	r12
 7d0:	df 92       	push	r13
 7d2:	ef 92       	push	r14
 7d4:	ff 92       	push	r15
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	4c 01       	movw	r8, r24
 7e0:	5b 01       	movw	r10, r22
 7e2:	6a 01       	movw	r12, r20
 7e4:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
 7e6:	4c e6       	ldi	r20, 0x6C	; 108
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	6e e0       	ldi	r22, 0x0E	; 14
 7ec:	8b e3       	ldi	r24, 0x3B	; 59
 7ee:	ee de       	rcall	.-548    	; 0x5cc <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 7f0:	ec e6       	ldi	r30, 0x6C	; 108
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	20 81       	ld	r18, Z
 7f6:	81 81       	ldd	r24, Z+1	; 0x01
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	92 2b       	or	r25, r18
 7fc:	d4 01       	movw	r26, r8
 7fe:	8d 93       	st	X+, r24
 800:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 802:	22 81       	ldd	r18, Z+2	; 0x02
 804:	83 81       	ldd	r24, Z+3	; 0x03
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	92 2b       	or	r25, r18
 80a:	d5 01       	movw	r26, r10
 80c:	8d 93       	st	X+, r24
 80e:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 810:	24 81       	ldd	r18, Z+4	; 0x04
 812:	85 81       	ldd	r24, Z+5	; 0x05
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	92 2b       	or	r25, r18
 818:	d6 01       	movw	r26, r12
 81a:	8d 93       	st	X+, r24
 81c:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 81e:	20 85       	ldd	r18, Z+8	; 0x08
 820:	81 85       	ldd	r24, Z+9	; 0x09
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	92 2b       	or	r25, r18
 826:	99 83       	std	Y+1, r25	; 0x01
 828:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 82a:	22 85       	ldd	r18, Z+10	; 0x0a
 82c:	83 85       	ldd	r24, Z+11	; 0x0b
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	92 2b       	or	r25, r18
 832:	d8 01       	movw	r26, r16
 834:	8d 93       	st	X+, r24
 836:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 838:	24 85       	ldd	r18, Z+12	; 0x0c
 83a:	85 85       	ldd	r24, Z+13	; 0x0d
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	92 2b       	or	r25, r18
 840:	f7 01       	movw	r30, r14
 842:	91 83       	std	Z+1, r25	; 0x01
 844:	80 83       	st	Z, r24
}
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	1f 91       	pop	r17
 84c:	0f 91       	pop	r16
 84e:	ff 90       	pop	r15
 850:	ef 90       	pop	r14
 852:	df 90       	pop	r13
 854:	cf 90       	pop	r12
 856:	bf 90       	pop	r11
 858:	af 90       	pop	r10
 85a:	9f 90       	pop	r9
 85c:	8f 90       	pop	r8
 85e:	08 95       	ret

00000860 <__vector_5>:
#include "mpu6050v2.h"

volatile int intr_count = 0;

ISR (TIMER0_OVF_vect)      //Interrupt vector for Timer0
{
 860:	1f 92       	push	r1
 862:	0f 92       	push	r0
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	0f 92       	push	r0
 868:	11 24       	eor	r1, r1
 86a:	8f 93       	push	r24
 86c:	9f 93       	push	r25
	intr_count++;
 86e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 872:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 87c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	TCNT0 = 0x00;
 880:	12 be       	out	0x32, r1	; 50
}
 882:	9f 91       	pop	r25
 884:	8f 91       	pop	r24
 886:	0f 90       	pop	r0
 888:	0f be       	out	0x3f, r0	; 63
 88a:	0f 90       	pop	r0
 88c:	1f 90       	pop	r1
 88e:	18 95       	reti

00000890 <initTimer>:


void initTimer()
{
	TCCR0A = 0x00;
 890:	1a bc       	out	0x2a, r1	; 42
	TCCR0B = 0x00;
 892:	13 be       	out	0x33, r1	; 51
	TCCR0B |= (1<<CS00)|(1<<CS02);
 894:	83 b7       	in	r24, 0x33	; 51
 896:	85 60       	ori	r24, 0x05	; 5
 898:	83 bf       	out	0x33, r24	; 51
	sei();
 89a:	78 94       	sei
	TCNT0=0;
 89c:	12 be       	out	0x32, r1	; 50
	TIMSK|=(1<<TOIE0);
 89e:	89 b7       	in	r24, 0x39	; 57
 8a0:	82 60       	ori	r24, 0x02	; 2
 8a2:	89 bf       	out	0x39, r24	; 57
 8a4:	08 95       	ret

000008a6 <getSeconds>:
}

float getSeconds()
{
	return (intr_count * 63.18)/3.0;
 8a6:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 8aa:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
 8ae:	07 2e       	mov	r0, r23
 8b0:	00 0c       	add	r0, r0
 8b2:	88 0b       	sbc	r24, r24
 8b4:	99 0b       	sbc	r25, r25
 8b6:	e4 d1       	rcall	.+968    	; 0xc80 <__floatsisf>
 8b8:	22 e5       	ldi	r18, 0x52	; 82
 8ba:	38 eb       	ldi	r19, 0xB8	; 184
 8bc:	4c e7       	ldi	r20, 0x7C	; 124
 8be:	52 e4       	ldi	r21, 0x42	; 66
 8c0:	93 d2       	rcall	.+1318   	; 0xde8 <__mulsf3>
 8c2:	20 e0       	ldi	r18, 0x00	; 0
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	40 e4       	ldi	r20, 0x40	; 64
 8c8:	50 e4       	ldi	r21, 0x40	; 64
 8ca:	44 d1       	rcall	.+648    	; 0xb54 <__divsf3>
 8cc:	08 95       	ret

000008ce <USI_TWI_Master_Initialise>:
	}
	else
	{
		buffer[2] = msg;
	}
}
 8ce:	c0 9a       	sbi	0x18, 0	; 24
 8d0:	c2 9a       	sbi	0x18, 2	; 24
 8d2:	ba 9a       	sbi	0x17, 2	; 23
 8d4:	b8 9a       	sbi	0x17, 0	; 23
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	8f b9       	out	0x0f, r24	; 15
 8da:	8a e2       	ldi	r24, 0x2A	; 42
 8dc:	8d b9       	out	0x0d, r24	; 13
 8de:	80 ef       	ldi	r24, 0xF0	; 240
 8e0:	8e b9       	out	0x0e, r24	; 14
 8e2:	08 95       	ret

000008e4 <USI_TWI_Master_Transfer>:
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
	USISR = temp;                                          // Set USISR according to temp.
 8e4:	8e b9       	out	0x0e, r24	; 14
	       (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
	       (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
	       (1 << USITC);                                   // Toggle Clock Port.
	do {
		DELAY_T2TWI;
		USICR = temp; // Generate positve SCL edge.
 8e6:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8e8:	97 e0       	ldi	r25, 0x07	; 7
 8ea:	9a 95       	dec	r25
 8ec:	f1 f7       	brne	.-4      	; 0x8ea <USI_TWI_Master_Transfer+0x6>
 8ee:	8d b9       	out	0x0d, r24	; 13
		while (!(PIN_USI & (1 << PIN_USI_SCL))); // Wait for SCL to go high.
 8f0:	b2 9b       	sbis	0x16, 2	; 22
 8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <USI_TWI_Master_Transfer+0xc>
 8f4:	93 e0       	ldi	r25, 0x03	; 3
 8f6:	9a 95       	dec	r25
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <USI_TWI_Master_Transfer+0x12>
 8fa:	00 00       	nop
		DELAY_T4TWI;
		USICR = temp;                   // Generate negative SCL edge.
 8fc:	8d b9       	out	0x0d, r24	; 13
	} while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
 8fe:	76 9b       	sbis	0x0e, 6	; 14
 900:	f3 cf       	rjmp	.-26     	; 0x8e8 <USI_TWI_Master_Transfer+0x4>
 902:	87 e0       	ldi	r24, 0x07	; 7
 904:	8a 95       	dec	r24
 906:	f1 f7       	brne	.-4      	; 0x904 <USI_TWI_Master_Transfer+0x20>

	DELAY_T2TWI;
	temp  = USIDR;                 // Read out data.
 908:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;                  // Release SDA.
 90a:	9f ef       	ldi	r25, 0xFF	; 255
 90c:	9f b9       	out	0x0f, r25	; 15
	DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
 90e:	b8 9a       	sbi	0x17, 0	; 23

	return temp; // Return the data from the USIDR
}
 910:	08 95       	ret

00000912 <USI_TWI_Master_Stop>:
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
	PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
 912:	c0 98       	cbi	0x18, 0	; 24
	PORT_USI |= (1 << PIN_USI_SCL);  // Release SCL.
 914:	c2 9a       	sbi	0x18, 2	; 24
	while (!(PIN_USI & (1 << PIN_USI_SCL)))
 916:	b2 9b       	sbis	0x16, 2	; 22
 918:	fe cf       	rjmp	.-4      	; 0x916 <USI_TWI_Master_Stop+0x4>
 91a:	83 e0       	ldi	r24, 0x03	; 3
 91c:	8a 95       	dec	r24
 91e:	f1 f7       	brne	.-4      	; 0x91c <USI_TWI_Master_Stop+0xa>
 920:	00 00       	nop
		; // Wait for SCL to go high.
	DELAY_T4TWI;
	PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
 922:	c0 9a       	sbi	0x18, 0	; 24
 924:	87 e0       	ldi	r24, 0x07	; 7
 926:	8a 95       	dec	r24
 928:	f1 f7       	brne	.-4      	; 0x926 <USI_TWI_Master_Stop+0x14>
		return (FALSE);
	}
#endif

	return (TRUE);
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	08 95       	ret

0000092e <USI_TWI_Start_Transceiver_With_Data>:
---------------------------------------------------------------*/
#ifndef __GNUC__
__x // AVR compiler
#endif
    unsigned char USI_TWI_Start_Transceiver_With_Data(unsigned char *msg, unsigned char msgSize)
{
 92e:	0f 93       	push	r16
 930:	1f 93       	push	r17
 932:	cf 93       	push	r28
 934:	df 93       	push	r29
 936:	ec 01       	movw	r28, r24
 938:	16 2f       	mov	r17, r22
	USI_TWI_Master_Initialise();
 93a:	c9 df       	rcall	.-110    	; 0x8ce <USI_TWI_Master_Initialise>
	unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)
	                               |                 // Prepare register value to: Clear flags, and
	                               (0xE << USICNT0); // set USI to shift 1 bit i.e. count 2 clock edges.

	USI_TWI_state.errorState  = 0;
	USI_TWI_state.addressMode = TRUE;
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <USI_TWI_state>
		USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
		return (FALSE);
	}
#endif

	if (!(*msg
 942:	88 81       	ld	r24, Y
 944:	80 fd       	sbrc	r24, 0
 946:	03 c0       	rjmp	.+6      	; 0x94e <USI_TWI_Start_Transceiver_With_Data+0x20>
	      & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
	{
		USI_TWI_state.masterWriteDataMode = TRUE;
 948:	83 e0       	ldi	r24, 0x03	; 3
 94a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <USI_TWI_state>
	}

	/* Release SCL to ensure that (repeated) Start can be performed */
	PORT_USI |= (1 << PIN_USI_SCL); // Release SCL.
 94e:	c2 9a       	sbi	0x18, 2	; 24
	while (!(PIN_USI & (1 << PIN_USI_SCL)))
 950:	b2 9b       	sbis	0x16, 2	; 22
 952:	fe cf       	rjmp	.-4      	; 0x950 <USI_TWI_Start_Transceiver_With_Data+0x22>
 954:	83 e0       	ldi	r24, 0x03	; 3
 956:	8a 95       	dec	r24
 958:	f1 f7       	brne	.-4      	; 0x956 <USI_TWI_Start_Transceiver_With_Data+0x28>
 95a:	00 00       	nop
#else
	DELAY_T2TWI; // Delay for T2TWI if TWI_STANDARD_MODE
#endif

	/* Generate Start Condition */
	PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
 95c:	c0 98       	cbi	0x18, 0	; 24
 95e:	83 e0       	ldi	r24, 0x03	; 3
 960:	8a 95       	dec	r24
 962:	f1 f7       	brne	.-4      	; 0x960 <USI_TWI_Start_Transceiver_With_Data+0x32>
 964:	00 00       	nop
	DELAY_T4TWI;
	PORT_USI &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
 966:	c2 98       	cbi	0x18, 2	; 24
	PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
 968:	c0 9a       	sbi	0x18, 0	; 24
			*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if (msgSize == 1) // If transmission of last byte was performed.
			{
				USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
 96a:	0f ef       	ldi	r16, 0xFF	; 255
#endif

	/*Write address and Read/Write data */
	do {
		/* If masterWrite cycle (or inital address tranmission)*/
		if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
 96c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <USI_TWI_state>
 970:	83 70       	andi	r24, 0x03	; 3
 972:	81 f0       	breq	.+32     	; 0x994 <USI_TWI_Start_Transceiver_With_Data+0x66>
			/* Write a byte */
			PORT_USI &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
 974:	c2 98       	cbi	0x18, 2	; 24
			USIDR = *(msg++);                        // Setup data.
 976:	88 81       	ld	r24, Y
 978:	8f b9       	out	0x0f, r24	; 15
			USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
 97a:	80 ef       	ldi	r24, 0xF0	; 240
 97c:	b3 df       	rcall	.-154    	; 0x8e4 <USI_TWI_Master_Transfer>

			/* Clock and verify (N)ACK from slave */
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
 97e:	b8 98       	cbi	0x17, 0	; 23
			if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
 980:	8e ef       	ldi	r24, 0xFE	; 254
 982:	b0 df       	rcall	.-160    	; 0x8e4 <USI_TWI_Master_Transfer>
 984:	80 fd       	sbrc	r24, 0
 986:	18 c0       	rjmp	.+48     	; 0x9b8 <USI_TWI_Start_Transceiver_With_Data+0x8a>
					//USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
				//else
					//USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
				return (FALSE);
			}
			USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
 988:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <USI_TWI_state>
 98c:	8e 7f       	andi	r24, 0xFE	; 254
 98e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <USI_TWI_state>
 992:	0b c0       	rjmp	.+22     	; 0x9aa <USI_TWI_Start_Transceiver_With_Data+0x7c>
		}
		/* Else masterRead cycle*/
		else {
			/* Read a data byte */
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
 994:	b8 98       	cbi	0x17, 0	; 23
			*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
 996:	80 ef       	ldi	r24, 0xF0	; 240
 998:	a5 df       	rcall	.-182    	; 0x8e4 <USI_TWI_Master_Transfer>
 99a:	88 83       	st	Y, r24

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if (msgSize == 1) // If transmission of last byte was performed.
 99c:	11 30       	cpi	r17, 0x01	; 1
 99e:	11 f4       	brne	.+4      	; 0x9a4 <USI_TWI_Start_Transceiver_With_Data+0x76>
			{
				USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
 9a0:	0f b9       	out	0x0f, r16	; 15
 9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <USI_TWI_Start_Transceiver_With_Data+0x78>
			} else {
				USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
 9a4:	1f b8       	out	0x0f, r1	; 15
			}
			USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
 9a6:	8e ef       	ldi	r24, 0xFE	; 254
 9a8:	9d df       	rcall	.-198    	; 0x8e4 <USI_TWI_Master_Transfer>
		}
	} while (--msgSize); // Until all data sent/received.
 9aa:	11 50       	subi	r17, 0x01	; 1
 9ac:	21 96       	adiw	r28, 0x01	; 1
 9ae:	11 11       	cpse	r17, r1
 9b0:	dd cf       	rjmp	.-70     	; 0x96c <USI_TWI_Start_Transceiver_With_Data+0x3e>

	USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
 9b2:	af df       	rcall	.-162    	; 0x912 <USI_TWI_Master_Stop>

	/* Transmission successfully completed*/
	return (TRUE);
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	01 c0       	rjmp	.+2      	; 0x9ba <USI_TWI_Start_Transceiver_With_Data+0x8c>
			if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
				//if (USI_TWI_state.addressMode)
					//USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
				//else
					//USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
				return (FALSE);
 9b8:	80 e0       	ldi	r24, 0x00	; 0

	USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.

	/* Transmission successfully completed*/
	return (TRUE);
}
 9ba:	df 91       	pop	r29
 9bc:	cf 91       	pop	r28
 9be:	1f 91       	pop	r17
 9c0:	0f 91       	pop	r16
 9c2:	08 95       	ret

000009c4 <USI_TWI_START_Read_Data>:

unsigned char USI_TWI_START_Read_Data(unsigned char *msg, unsigned char msgSize)
{
 9c4:	0f 93       	push	r16
 9c6:	1f 93       	push	r17
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	ec 01       	movw	r28, r24
 9ce:	16 2f       	mov	r17, r22
	USI_TWI_Master_Initialise();
 9d0:	7e df       	rcall	.-260    	; 0x8ce <USI_TWI_Master_Initialise>
	unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)
	|                 // Prepare register value to: Clear flags, and
	(0xE << USICNT0); // set USI to shift 1 bit i.e. count 2 clock edges.

	USI_TWI_state.errorState  = 0;
	USI_TWI_state.addressMode = TRUE;
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <USI_TWI_state>
		//Might cause errors, think about addressing in code.
		//return false;
	}
	
	/* Release SCL to ensure that (repeated) Start can be performed */
	PORT_USI |= (1 << PIN_USI_SCL); // Release SCL.
 9d8:	c2 9a       	sbi	0x18, 2	; 24
	while (!(PIN_USI & (1 << PIN_USI_SCL)))
 9da:	b2 9b       	sbis	0x16, 2	; 22
 9dc:	fe cf       	rjmp	.-4      	; 0x9da <USI_TWI_START_Read_Data+0x16>
	; // Verify that SCL becomes high.

	/* Generate Start Condition */
	PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
 9de:	c0 98       	cbi	0x18, 0	; 24
 9e0:	83 e0       	ldi	r24, 0x03	; 3
 9e2:	8a 95       	dec	r24
 9e4:	f1 f7       	brne	.-4      	; 0x9e2 <USI_TWI_START_Read_Data+0x1e>
 9e6:	00 00       	nop
	DELAY_T4TWI;
	PORT_USI &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
 9e8:	c2 98       	cbi	0x18, 2	; 24
	PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
 9ea:	c0 9a       	sbi	0x18, 0	; 24
	
	
	/*Write address and Read/Write data */
	
	/* If masterWrite cycle (or inital address tranmission)*/
	if (USI_TWI_state.addressMode) 
 9ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <USI_TWI_state>
 9f0:	80 ff       	sbrs	r24, 0
 9f2:	32 c0       	rjmp	.+100    	; 0xa58 <USI_TWI_START_Read_Data+0x94>
 9f4:	0e ef       	ldi	r16, 0xFE	; 254
 9f6:	01 0f       	add	r16, r17
	{
		for(uint8_t i = 0; i < 2; i++) 
		{
			/* Write a byte */
			PORT_USI &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
 9f8:	c2 98       	cbi	0x18, 2	; 24
			USIDR = *(msg++);                        // Setup data.
 9fa:	21 96       	adiw	r28, 0x01	; 1
 9fc:	fe 01       	movw	r30, r28
 9fe:	31 97       	sbiw	r30, 0x01	; 1
 a00:	80 81       	ld	r24, Z
 a02:	8f b9       	out	0x0f, r24	; 15
			USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
 a04:	80 ef       	ldi	r24, 0xF0	; 240
 a06:	6e df       	rcall	.-292    	; 0x8e4 <USI_TWI_Master_Transfer>
	
			/* Clock and verify (N)ACK from slave */
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
 a08:	b8 98       	cbi	0x17, 0	; 23
			if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) 
 a0a:	8e ef       	ldi	r24, 0xFE	; 254
 a0c:	6b df       	rcall	.-298    	; 0x8e4 <USI_TWI_Master_Transfer>
 a0e:	80 ff       	sbrs	r24, 0
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <USI_TWI_START_Read_Data+0x52>
			{
				//if (USI_TWI_state.addressMode)
				//USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
				//else
				//USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
				return (FALSE);
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	31 c0       	rjmp	.+98     	; 0xa78 <USI_TWI_START_Read_Data+0xb4>
			}
		msgSize--;
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	81 0f       	add	r24, r17
	/*Write address and Read/Write data */
	
	/* If masterWrite cycle (or inital address tranmission)*/
	if (USI_TWI_state.addressMode) 
	{
		for(uint8_t i = 0; i < 2; i++) 
 a1a:	80 17       	cp	r24, r16
 a1c:	11 f0       	breq	.+4      	; 0xa22 <USI_TWI_START_Read_Data+0x5e>
 a1e:	18 2f       	mov	r17, r24
 a20:	eb cf       	rjmp	.-42     	; 0x9f8 <USI_TWI_START_Read_Data+0x34>
				return (FALSE);
			}
		msgSize--;
		}
		/* Release SCL to ensure that (repeated) Start can be performed */
		PORT_USI |= (1 << PIN_USI_SCL); // Release SCL.
 a22:	c2 9a       	sbi	0x18, 2	; 24
		while (!(PIN_USI & (1 << PIN_USI_SCL)))
 a24:	b2 9b       	sbis	0x16, 2	; 22
 a26:	fe cf       	rjmp	.-4      	; 0xa24 <USI_TWI_START_Read_Data+0x60>
		; // Verify that SCL becomes high.
		
		/* Generate Start Condition */
		PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
 a28:	c0 98       	cbi	0x18, 0	; 24
 a2a:	83 e0       	ldi	r24, 0x03	; 3
 a2c:	8a 95       	dec	r24
 a2e:	f1 f7       	brne	.-4      	; 0xa2c <USI_TWI_START_Read_Data+0x68>
 a30:	00 00       	nop
		DELAY_T4TWI;
		PORT_USI &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
 a32:	c2 98       	cbi	0x18, 2	; 24
		PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
 a34:	c0 9a       	sbi	0x18, 0	; 24
		
		/* Write a byte */
		PORT_USI &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
 a36:	c2 98       	cbi	0x18, 2	; 24
		USIDR = *(msg++);                        // Setup data.
 a38:	88 81       	ld	r24, Y
 a3a:	8f b9       	out	0x0f, r24	; 15
		USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
 a3c:	80 ef       	ldi	r24, 0xF0	; 240
 a3e:	52 df       	rcall	.-348    	; 0x8e4 <USI_TWI_Master_Transfer>
		
		/* Clock and verify (N)ACK from slave */
		DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
 a40:	b8 98       	cbi	0x17, 0	; 23
		if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT))
 a42:	8e ef       	ldi	r24, 0xFE	; 254
 a44:	4f df       	rcall	.-354    	; 0x8e4 <USI_TWI_Master_Transfer>
 a46:	80 fd       	sbrc	r24, 0
 a48:	e4 cf       	rjmp	.-56     	; 0xa12 <USI_TWI_START_Read_Data+0x4e>
		PORT_USI &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
		PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
		
		/* Write a byte */
		PORT_USI &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
		USIDR = *(msg++);                        // Setup data.
 a4a:	21 96       	adiw	r28, 0x01	; 1
			//USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
			//else
			//USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
			return (FALSE);
		}
		msgSize--;
 a4c:	12 50       	subi	r17, 0x02	; 2
		
		USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
 a4e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <USI_TWI_state>
 a52:	8e 7f       	andi	r24, 0xFE	; 254
 a54:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <USI_TWI_state>
		*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

		/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
		if (msgSize == 1) // If transmission of last byte was performed.
		{
			USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
 a58:	0f ef       	ldi	r16, 0xFF	; 255
	}
	/* Else masterRead cycle*/
	do 
	{
		/* Read a data byte */
		DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
 a5a:	b8 98       	cbi	0x17, 0	; 23
		*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
 a5c:	80 ef       	ldi	r24, 0xF0	; 240
 a5e:	42 df       	rcall	.-380    	; 0x8e4 <USI_TWI_Master_Transfer>
 a60:	89 93       	st	Y+, r24

		/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
		if (msgSize == 1) // If transmission of last byte was performed.
 a62:	11 30       	cpi	r17, 0x01	; 1
 a64:	11 f4       	brne	.+4      	; 0xa6a <USI_TWI_START_Read_Data+0xa6>
		{
			USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
 a66:	0f b9       	out	0x0f, r16	; 15
 a68:	01 c0       	rjmp	.+2      	; 0xa6c <USI_TWI_START_Read_Data+0xa8>
		} 
		else 
		{
		USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
 a6a:	1f b8       	out	0x0f, r1	; 15
		}
		
		USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
 a6c:	8e ef       	ldi	r24, 0xFE	; 254
 a6e:	3a df       	rcall	.-396    	; 0x8e4 <USI_TWI_Master_Transfer>
	} while (--msgSize); // Until all data sent/received.
 a70:	11 50       	subi	r17, 0x01	; 1
 a72:	99 f7       	brne	.-26     	; 0xa5a <USI_TWI_START_Read_Data+0x96>

	USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
 a74:	4e df       	rcall	.-356    	; 0x912 <USI_TWI_Master_Stop>

	/* Transmission successfully completed*/
	return (TRUE);
 a76:	81 e0       	ldi	r24, 0x01	; 1
}
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	1f 91       	pop	r17
 a7e:	0f 91       	pop	r16
 a80:	08 95       	ret

00000a82 <__subsf3>:
 a82:	50 58       	subi	r21, 0x80	; 128

00000a84 <__addsf3>:
 a84:	bb 27       	eor	r27, r27
 a86:	aa 27       	eor	r26, r26
 a88:	0e d0       	rcall	.+28     	; 0xaa6 <__addsf3x>
 a8a:	70 c1       	rjmp	.+736    	; 0xd6c <__fp_round>
 a8c:	61 d1       	rcall	.+706    	; 0xd50 <__fp_pscA>
 a8e:	30 f0       	brcs	.+12     	; 0xa9c <__addsf3+0x18>
 a90:	66 d1       	rcall	.+716    	; 0xd5e <__fp_pscB>
 a92:	20 f0       	brcs	.+8      	; 0xa9c <__addsf3+0x18>
 a94:	31 f4       	brne	.+12     	; 0xaa2 <__addsf3+0x1e>
 a96:	9f 3f       	cpi	r25, 0xFF	; 255
 a98:	11 f4       	brne	.+4      	; 0xa9e <__addsf3+0x1a>
 a9a:	1e f4       	brtc	.+6      	; 0xaa2 <__addsf3+0x1e>
 a9c:	56 c1       	rjmp	.+684    	; 0xd4a <__fp_nan>
 a9e:	0e f4       	brtc	.+2      	; 0xaa2 <__addsf3+0x1e>
 aa0:	e0 95       	com	r30
 aa2:	e7 fb       	bst	r30, 7
 aa4:	4c c1       	rjmp	.+664    	; 0xd3e <__fp_inf>

00000aa6 <__addsf3x>:
 aa6:	e9 2f       	mov	r30, r25
 aa8:	72 d1       	rcall	.+740    	; 0xd8e <__fp_split3>
 aaa:	80 f3       	brcs	.-32     	; 0xa8c <__addsf3+0x8>
 aac:	ba 17       	cp	r27, r26
 aae:	62 07       	cpc	r22, r18
 ab0:	73 07       	cpc	r23, r19
 ab2:	84 07       	cpc	r24, r20
 ab4:	95 07       	cpc	r25, r21
 ab6:	18 f0       	brcs	.+6      	; 0xabe <__addsf3x+0x18>
 ab8:	71 f4       	brne	.+28     	; 0xad6 <__addsf3x+0x30>
 aba:	9e f5       	brtc	.+102    	; 0xb22 <__addsf3x+0x7c>
 abc:	8a c1       	rjmp	.+788    	; 0xdd2 <__fp_zero>
 abe:	0e f4       	brtc	.+2      	; 0xac2 <__addsf3x+0x1c>
 ac0:	e0 95       	com	r30
 ac2:	0b 2e       	mov	r0, r27
 ac4:	ba 2f       	mov	r27, r26
 ac6:	a0 2d       	mov	r26, r0
 ac8:	0b 01       	movw	r0, r22
 aca:	b9 01       	movw	r22, r18
 acc:	90 01       	movw	r18, r0
 ace:	0c 01       	movw	r0, r24
 ad0:	ca 01       	movw	r24, r20
 ad2:	a0 01       	movw	r20, r0
 ad4:	11 24       	eor	r1, r1
 ad6:	ff 27       	eor	r31, r31
 ad8:	59 1b       	sub	r21, r25
 ada:	99 f0       	breq	.+38     	; 0xb02 <__addsf3x+0x5c>
 adc:	59 3f       	cpi	r21, 0xF9	; 249
 ade:	50 f4       	brcc	.+20     	; 0xaf4 <__addsf3x+0x4e>
 ae0:	50 3e       	cpi	r21, 0xE0	; 224
 ae2:	68 f1       	brcs	.+90     	; 0xb3e <__addsf3x+0x98>
 ae4:	1a 16       	cp	r1, r26
 ae6:	f0 40       	sbci	r31, 0x00	; 0
 ae8:	a2 2f       	mov	r26, r18
 aea:	23 2f       	mov	r18, r19
 aec:	34 2f       	mov	r19, r20
 aee:	44 27       	eor	r20, r20
 af0:	58 5f       	subi	r21, 0xF8	; 248
 af2:	f3 cf       	rjmp	.-26     	; 0xada <__addsf3x+0x34>
 af4:	46 95       	lsr	r20
 af6:	37 95       	ror	r19
 af8:	27 95       	ror	r18
 afa:	a7 95       	ror	r26
 afc:	f0 40       	sbci	r31, 0x00	; 0
 afe:	53 95       	inc	r21
 b00:	c9 f7       	brne	.-14     	; 0xaf4 <__addsf3x+0x4e>
 b02:	7e f4       	brtc	.+30     	; 0xb22 <__addsf3x+0x7c>
 b04:	1f 16       	cp	r1, r31
 b06:	ba 0b       	sbc	r27, r26
 b08:	62 0b       	sbc	r22, r18
 b0a:	73 0b       	sbc	r23, r19
 b0c:	84 0b       	sbc	r24, r20
 b0e:	ba f0       	brmi	.+46     	; 0xb3e <__addsf3x+0x98>
 b10:	91 50       	subi	r25, 0x01	; 1
 b12:	a1 f0       	breq	.+40     	; 0xb3c <__addsf3x+0x96>
 b14:	ff 0f       	add	r31, r31
 b16:	bb 1f       	adc	r27, r27
 b18:	66 1f       	adc	r22, r22
 b1a:	77 1f       	adc	r23, r23
 b1c:	88 1f       	adc	r24, r24
 b1e:	c2 f7       	brpl	.-16     	; 0xb10 <__addsf3x+0x6a>
 b20:	0e c0       	rjmp	.+28     	; 0xb3e <__addsf3x+0x98>
 b22:	ba 0f       	add	r27, r26
 b24:	62 1f       	adc	r22, r18
 b26:	73 1f       	adc	r23, r19
 b28:	84 1f       	adc	r24, r20
 b2a:	48 f4       	brcc	.+18     	; 0xb3e <__addsf3x+0x98>
 b2c:	87 95       	ror	r24
 b2e:	77 95       	ror	r23
 b30:	67 95       	ror	r22
 b32:	b7 95       	ror	r27
 b34:	f7 95       	ror	r31
 b36:	9e 3f       	cpi	r25, 0xFE	; 254
 b38:	08 f0       	brcs	.+2      	; 0xb3c <__addsf3x+0x96>
 b3a:	b3 cf       	rjmp	.-154    	; 0xaa2 <__addsf3+0x1e>
 b3c:	93 95       	inc	r25
 b3e:	88 0f       	add	r24, r24
 b40:	08 f0       	brcs	.+2      	; 0xb44 <__addsf3x+0x9e>
 b42:	99 27       	eor	r25, r25
 b44:	ee 0f       	add	r30, r30
 b46:	97 95       	ror	r25
 b48:	87 95       	ror	r24
 b4a:	08 95       	ret

00000b4c <__cmpsf2>:
 b4c:	d4 d0       	rcall	.+424    	; 0xcf6 <__fp_cmp>
 b4e:	08 f4       	brcc	.+2      	; 0xb52 <__cmpsf2+0x6>
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	08 95       	ret

00000b54 <__divsf3>:
 b54:	0c d0       	rcall	.+24     	; 0xb6e <__divsf3x>
 b56:	0a c1       	rjmp	.+532    	; 0xd6c <__fp_round>
 b58:	02 d1       	rcall	.+516    	; 0xd5e <__fp_pscB>
 b5a:	40 f0       	brcs	.+16     	; 0xb6c <__divsf3+0x18>
 b5c:	f9 d0       	rcall	.+498    	; 0xd50 <__fp_pscA>
 b5e:	30 f0       	brcs	.+12     	; 0xb6c <__divsf3+0x18>
 b60:	21 f4       	brne	.+8      	; 0xb6a <__divsf3+0x16>
 b62:	5f 3f       	cpi	r21, 0xFF	; 255
 b64:	19 f0       	breq	.+6      	; 0xb6c <__divsf3+0x18>
 b66:	eb c0       	rjmp	.+470    	; 0xd3e <__fp_inf>
 b68:	51 11       	cpse	r21, r1
 b6a:	34 c1       	rjmp	.+616    	; 0xdd4 <__fp_szero>
 b6c:	ee c0       	rjmp	.+476    	; 0xd4a <__fp_nan>

00000b6e <__divsf3x>:
 b6e:	0f d1       	rcall	.+542    	; 0xd8e <__fp_split3>
 b70:	98 f3       	brcs	.-26     	; 0xb58 <__divsf3+0x4>

00000b72 <__divsf3_pse>:
 b72:	99 23       	and	r25, r25
 b74:	c9 f3       	breq	.-14     	; 0xb68 <__divsf3+0x14>
 b76:	55 23       	and	r21, r21
 b78:	b1 f3       	breq	.-20     	; 0xb66 <__divsf3+0x12>
 b7a:	95 1b       	sub	r25, r21
 b7c:	55 0b       	sbc	r21, r21
 b7e:	bb 27       	eor	r27, r27
 b80:	aa 27       	eor	r26, r26
 b82:	62 17       	cp	r22, r18
 b84:	73 07       	cpc	r23, r19
 b86:	84 07       	cpc	r24, r20
 b88:	38 f0       	brcs	.+14     	; 0xb98 <__divsf3_pse+0x26>
 b8a:	9f 5f       	subi	r25, 0xFF	; 255
 b8c:	5f 4f       	sbci	r21, 0xFF	; 255
 b8e:	22 0f       	add	r18, r18
 b90:	33 1f       	adc	r19, r19
 b92:	44 1f       	adc	r20, r20
 b94:	aa 1f       	adc	r26, r26
 b96:	a9 f3       	breq	.-22     	; 0xb82 <__divsf3_pse+0x10>
 b98:	33 d0       	rcall	.+102    	; 0xc00 <__divsf3_pse+0x8e>
 b9a:	0e 2e       	mov	r0, r30
 b9c:	3a f0       	brmi	.+14     	; 0xbac <__divsf3_pse+0x3a>
 b9e:	e0 e8       	ldi	r30, 0x80	; 128
 ba0:	30 d0       	rcall	.+96     	; 0xc02 <__divsf3_pse+0x90>
 ba2:	91 50       	subi	r25, 0x01	; 1
 ba4:	50 40       	sbci	r21, 0x00	; 0
 ba6:	e6 95       	lsr	r30
 ba8:	00 1c       	adc	r0, r0
 baa:	ca f7       	brpl	.-14     	; 0xb9e <__divsf3_pse+0x2c>
 bac:	29 d0       	rcall	.+82     	; 0xc00 <__divsf3_pse+0x8e>
 bae:	fe 2f       	mov	r31, r30
 bb0:	27 d0       	rcall	.+78     	; 0xc00 <__divsf3_pse+0x8e>
 bb2:	66 0f       	add	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	bb 1f       	adc	r27, r27
 bba:	26 17       	cp	r18, r22
 bbc:	37 07       	cpc	r19, r23
 bbe:	48 07       	cpc	r20, r24
 bc0:	ab 07       	cpc	r26, r27
 bc2:	b0 e8       	ldi	r27, 0x80	; 128
 bc4:	09 f0       	breq	.+2      	; 0xbc8 <__divsf3_pse+0x56>
 bc6:	bb 0b       	sbc	r27, r27
 bc8:	80 2d       	mov	r24, r0
 bca:	bf 01       	movw	r22, r30
 bcc:	ff 27       	eor	r31, r31
 bce:	93 58       	subi	r25, 0x83	; 131
 bd0:	5f 4f       	sbci	r21, 0xFF	; 255
 bd2:	2a f0       	brmi	.+10     	; 0xbde <__divsf3_pse+0x6c>
 bd4:	9e 3f       	cpi	r25, 0xFE	; 254
 bd6:	51 05       	cpc	r21, r1
 bd8:	68 f0       	brcs	.+26     	; 0xbf4 <__divsf3_pse+0x82>
 bda:	b1 c0       	rjmp	.+354    	; 0xd3e <__fp_inf>
 bdc:	fb c0       	rjmp	.+502    	; 0xdd4 <__fp_szero>
 bde:	5f 3f       	cpi	r21, 0xFF	; 255
 be0:	ec f3       	brlt	.-6      	; 0xbdc <__divsf3_pse+0x6a>
 be2:	98 3e       	cpi	r25, 0xE8	; 232
 be4:	dc f3       	brlt	.-10     	; 0xbdc <__divsf3_pse+0x6a>
 be6:	86 95       	lsr	r24
 be8:	77 95       	ror	r23
 bea:	67 95       	ror	r22
 bec:	b7 95       	ror	r27
 bee:	f7 95       	ror	r31
 bf0:	9f 5f       	subi	r25, 0xFF	; 255
 bf2:	c9 f7       	brne	.-14     	; 0xbe6 <__divsf3_pse+0x74>
 bf4:	88 0f       	add	r24, r24
 bf6:	91 1d       	adc	r25, r1
 bf8:	96 95       	lsr	r25
 bfa:	87 95       	ror	r24
 bfc:	97 f9       	bld	r25, 7
 bfe:	08 95       	ret
 c00:	e1 e0       	ldi	r30, 0x01	; 1
 c02:	66 0f       	add	r22, r22
 c04:	77 1f       	adc	r23, r23
 c06:	88 1f       	adc	r24, r24
 c08:	bb 1f       	adc	r27, r27
 c0a:	62 17       	cp	r22, r18
 c0c:	73 07       	cpc	r23, r19
 c0e:	84 07       	cpc	r24, r20
 c10:	ba 07       	cpc	r27, r26
 c12:	20 f0       	brcs	.+8      	; 0xc1c <__divsf3_pse+0xaa>
 c14:	62 1b       	sub	r22, r18
 c16:	73 0b       	sbc	r23, r19
 c18:	84 0b       	sbc	r24, r20
 c1a:	ba 0b       	sbc	r27, r26
 c1c:	ee 1f       	adc	r30, r30
 c1e:	88 f7       	brcc	.-30     	; 0xc02 <__divsf3_pse+0x90>
 c20:	e0 95       	com	r30
 c22:	08 95       	ret

00000c24 <__fixunssfsi>:
 c24:	bc d0       	rcall	.+376    	; 0xd9e <__fp_splitA>
 c26:	88 f0       	brcs	.+34     	; 0xc4a <__fixunssfsi+0x26>
 c28:	9f 57       	subi	r25, 0x7F	; 127
 c2a:	90 f0       	brcs	.+36     	; 0xc50 <__fixunssfsi+0x2c>
 c2c:	b9 2f       	mov	r27, r25
 c2e:	99 27       	eor	r25, r25
 c30:	b7 51       	subi	r27, 0x17	; 23
 c32:	a0 f0       	brcs	.+40     	; 0xc5c <__fixunssfsi+0x38>
 c34:	d1 f0       	breq	.+52     	; 0xc6a <__fixunssfsi+0x46>
 c36:	66 0f       	add	r22, r22
 c38:	77 1f       	adc	r23, r23
 c3a:	88 1f       	adc	r24, r24
 c3c:	99 1f       	adc	r25, r25
 c3e:	1a f0       	brmi	.+6      	; 0xc46 <__fixunssfsi+0x22>
 c40:	ba 95       	dec	r27
 c42:	c9 f7       	brne	.-14     	; 0xc36 <__fixunssfsi+0x12>
 c44:	12 c0       	rjmp	.+36     	; 0xc6a <__fixunssfsi+0x46>
 c46:	b1 30       	cpi	r27, 0x01	; 1
 c48:	81 f0       	breq	.+32     	; 0xc6a <__fixunssfsi+0x46>
 c4a:	c3 d0       	rcall	.+390    	; 0xdd2 <__fp_zero>
 c4c:	b1 e0       	ldi	r27, 0x01	; 1
 c4e:	08 95       	ret
 c50:	c0 c0       	rjmp	.+384    	; 0xdd2 <__fp_zero>
 c52:	67 2f       	mov	r22, r23
 c54:	78 2f       	mov	r23, r24
 c56:	88 27       	eor	r24, r24
 c58:	b8 5f       	subi	r27, 0xF8	; 248
 c5a:	39 f0       	breq	.+14     	; 0xc6a <__fixunssfsi+0x46>
 c5c:	b9 3f       	cpi	r27, 0xF9	; 249
 c5e:	cc f3       	brlt	.-14     	; 0xc52 <__fixunssfsi+0x2e>
 c60:	86 95       	lsr	r24
 c62:	77 95       	ror	r23
 c64:	67 95       	ror	r22
 c66:	b3 95       	inc	r27
 c68:	d9 f7       	brne	.-10     	; 0xc60 <__fixunssfsi+0x3c>
 c6a:	3e f4       	brtc	.+14     	; 0xc7a <__fixunssfsi+0x56>
 c6c:	90 95       	com	r25
 c6e:	80 95       	com	r24
 c70:	70 95       	com	r23
 c72:	61 95       	neg	r22
 c74:	7f 4f       	sbci	r23, 0xFF	; 255
 c76:	8f 4f       	sbci	r24, 0xFF	; 255
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	08 95       	ret

00000c7c <__floatunsisf>:
 c7c:	e8 94       	clt
 c7e:	09 c0       	rjmp	.+18     	; 0xc92 <__floatsisf+0x12>

00000c80 <__floatsisf>:
 c80:	97 fb       	bst	r25, 7
 c82:	3e f4       	brtc	.+14     	; 0xc92 <__floatsisf+0x12>
 c84:	90 95       	com	r25
 c86:	80 95       	com	r24
 c88:	70 95       	com	r23
 c8a:	61 95       	neg	r22
 c8c:	7f 4f       	sbci	r23, 0xFF	; 255
 c8e:	8f 4f       	sbci	r24, 0xFF	; 255
 c90:	9f 4f       	sbci	r25, 0xFF	; 255
 c92:	99 23       	and	r25, r25
 c94:	a9 f0       	breq	.+42     	; 0xcc0 <__floatsisf+0x40>
 c96:	f9 2f       	mov	r31, r25
 c98:	96 e9       	ldi	r25, 0x96	; 150
 c9a:	bb 27       	eor	r27, r27
 c9c:	93 95       	inc	r25
 c9e:	f6 95       	lsr	r31
 ca0:	87 95       	ror	r24
 ca2:	77 95       	ror	r23
 ca4:	67 95       	ror	r22
 ca6:	b7 95       	ror	r27
 ca8:	f1 11       	cpse	r31, r1
 caa:	f8 cf       	rjmp	.-16     	; 0xc9c <__floatsisf+0x1c>
 cac:	fa f4       	brpl	.+62     	; 0xcec <__floatsisf+0x6c>
 cae:	bb 0f       	add	r27, r27
 cb0:	11 f4       	brne	.+4      	; 0xcb6 <__floatsisf+0x36>
 cb2:	60 ff       	sbrs	r22, 0
 cb4:	1b c0       	rjmp	.+54     	; 0xcec <__floatsisf+0x6c>
 cb6:	6f 5f       	subi	r22, 0xFF	; 255
 cb8:	7f 4f       	sbci	r23, 0xFF	; 255
 cba:	8f 4f       	sbci	r24, 0xFF	; 255
 cbc:	9f 4f       	sbci	r25, 0xFF	; 255
 cbe:	16 c0       	rjmp	.+44     	; 0xcec <__floatsisf+0x6c>
 cc0:	88 23       	and	r24, r24
 cc2:	11 f0       	breq	.+4      	; 0xcc8 <__floatsisf+0x48>
 cc4:	96 e9       	ldi	r25, 0x96	; 150
 cc6:	11 c0       	rjmp	.+34     	; 0xcea <__floatsisf+0x6a>
 cc8:	77 23       	and	r23, r23
 cca:	21 f0       	breq	.+8      	; 0xcd4 <__floatsisf+0x54>
 ccc:	9e e8       	ldi	r25, 0x8E	; 142
 cce:	87 2f       	mov	r24, r23
 cd0:	76 2f       	mov	r23, r22
 cd2:	05 c0       	rjmp	.+10     	; 0xcde <__floatsisf+0x5e>
 cd4:	66 23       	and	r22, r22
 cd6:	71 f0       	breq	.+28     	; 0xcf4 <__floatsisf+0x74>
 cd8:	96 e8       	ldi	r25, 0x86	; 134
 cda:	86 2f       	mov	r24, r22
 cdc:	70 e0       	ldi	r23, 0x00	; 0
 cde:	60 e0       	ldi	r22, 0x00	; 0
 ce0:	2a f0       	brmi	.+10     	; 0xcec <__floatsisf+0x6c>
 ce2:	9a 95       	dec	r25
 ce4:	66 0f       	add	r22, r22
 ce6:	77 1f       	adc	r23, r23
 ce8:	88 1f       	adc	r24, r24
 cea:	da f7       	brpl	.-10     	; 0xce2 <__floatsisf+0x62>
 cec:	88 0f       	add	r24, r24
 cee:	96 95       	lsr	r25
 cf0:	87 95       	ror	r24
 cf2:	97 f9       	bld	r25, 7
 cf4:	08 95       	ret

00000cf6 <__fp_cmp>:
 cf6:	99 0f       	add	r25, r25
 cf8:	00 08       	sbc	r0, r0
 cfa:	55 0f       	add	r21, r21
 cfc:	aa 0b       	sbc	r26, r26
 cfe:	e0 e8       	ldi	r30, 0x80	; 128
 d00:	fe ef       	ldi	r31, 0xFE	; 254
 d02:	16 16       	cp	r1, r22
 d04:	17 06       	cpc	r1, r23
 d06:	e8 07       	cpc	r30, r24
 d08:	f9 07       	cpc	r31, r25
 d0a:	c0 f0       	brcs	.+48     	; 0xd3c <__fp_cmp+0x46>
 d0c:	12 16       	cp	r1, r18
 d0e:	13 06       	cpc	r1, r19
 d10:	e4 07       	cpc	r30, r20
 d12:	f5 07       	cpc	r31, r21
 d14:	98 f0       	brcs	.+38     	; 0xd3c <__fp_cmp+0x46>
 d16:	62 1b       	sub	r22, r18
 d18:	73 0b       	sbc	r23, r19
 d1a:	84 0b       	sbc	r24, r20
 d1c:	95 0b       	sbc	r25, r21
 d1e:	39 f4       	brne	.+14     	; 0xd2e <__fp_cmp+0x38>
 d20:	0a 26       	eor	r0, r26
 d22:	61 f0       	breq	.+24     	; 0xd3c <__fp_cmp+0x46>
 d24:	23 2b       	or	r18, r19
 d26:	24 2b       	or	r18, r20
 d28:	25 2b       	or	r18, r21
 d2a:	21 f4       	brne	.+8      	; 0xd34 <__fp_cmp+0x3e>
 d2c:	08 95       	ret
 d2e:	0a 26       	eor	r0, r26
 d30:	09 f4       	brne	.+2      	; 0xd34 <__fp_cmp+0x3e>
 d32:	a1 40       	sbci	r26, 0x01	; 1
 d34:	a6 95       	lsr	r26
 d36:	8f ef       	ldi	r24, 0xFF	; 255
 d38:	81 1d       	adc	r24, r1
 d3a:	81 1d       	adc	r24, r1
 d3c:	08 95       	ret

00000d3e <__fp_inf>:
 d3e:	97 f9       	bld	r25, 7
 d40:	9f 67       	ori	r25, 0x7F	; 127
 d42:	80 e8       	ldi	r24, 0x80	; 128
 d44:	70 e0       	ldi	r23, 0x00	; 0
 d46:	60 e0       	ldi	r22, 0x00	; 0
 d48:	08 95       	ret

00000d4a <__fp_nan>:
 d4a:	9f ef       	ldi	r25, 0xFF	; 255
 d4c:	80 ec       	ldi	r24, 0xC0	; 192
 d4e:	08 95       	ret

00000d50 <__fp_pscA>:
 d50:	00 24       	eor	r0, r0
 d52:	0a 94       	dec	r0
 d54:	16 16       	cp	r1, r22
 d56:	17 06       	cpc	r1, r23
 d58:	18 06       	cpc	r1, r24
 d5a:	09 06       	cpc	r0, r25
 d5c:	08 95       	ret

00000d5e <__fp_pscB>:
 d5e:	00 24       	eor	r0, r0
 d60:	0a 94       	dec	r0
 d62:	12 16       	cp	r1, r18
 d64:	13 06       	cpc	r1, r19
 d66:	14 06       	cpc	r1, r20
 d68:	05 06       	cpc	r0, r21
 d6a:	08 95       	ret

00000d6c <__fp_round>:
 d6c:	09 2e       	mov	r0, r25
 d6e:	03 94       	inc	r0
 d70:	00 0c       	add	r0, r0
 d72:	11 f4       	brne	.+4      	; 0xd78 <__fp_round+0xc>
 d74:	88 23       	and	r24, r24
 d76:	52 f0       	brmi	.+20     	; 0xd8c <__fp_round+0x20>
 d78:	bb 0f       	add	r27, r27
 d7a:	40 f4       	brcc	.+16     	; 0xd8c <__fp_round+0x20>
 d7c:	bf 2b       	or	r27, r31
 d7e:	11 f4       	brne	.+4      	; 0xd84 <__fp_round+0x18>
 d80:	60 ff       	sbrs	r22, 0
 d82:	04 c0       	rjmp	.+8      	; 0xd8c <__fp_round+0x20>
 d84:	6f 5f       	subi	r22, 0xFF	; 255
 d86:	7f 4f       	sbci	r23, 0xFF	; 255
 d88:	8f 4f       	sbci	r24, 0xFF	; 255
 d8a:	9f 4f       	sbci	r25, 0xFF	; 255
 d8c:	08 95       	ret

00000d8e <__fp_split3>:
 d8e:	57 fd       	sbrc	r21, 7
 d90:	90 58       	subi	r25, 0x80	; 128
 d92:	44 0f       	add	r20, r20
 d94:	55 1f       	adc	r21, r21
 d96:	59 f0       	breq	.+22     	; 0xdae <__fp_splitA+0x10>
 d98:	5f 3f       	cpi	r21, 0xFF	; 255
 d9a:	71 f0       	breq	.+28     	; 0xdb8 <__fp_splitA+0x1a>
 d9c:	47 95       	ror	r20

00000d9e <__fp_splitA>:
 d9e:	88 0f       	add	r24, r24
 da0:	97 fb       	bst	r25, 7
 da2:	99 1f       	adc	r25, r25
 da4:	61 f0       	breq	.+24     	; 0xdbe <__fp_splitA+0x20>
 da6:	9f 3f       	cpi	r25, 0xFF	; 255
 da8:	79 f0       	breq	.+30     	; 0xdc8 <__fp_splitA+0x2a>
 daa:	87 95       	ror	r24
 dac:	08 95       	ret
 dae:	12 16       	cp	r1, r18
 db0:	13 06       	cpc	r1, r19
 db2:	14 06       	cpc	r1, r20
 db4:	55 1f       	adc	r21, r21
 db6:	f2 cf       	rjmp	.-28     	; 0xd9c <__fp_split3+0xe>
 db8:	46 95       	lsr	r20
 dba:	f1 df       	rcall	.-30     	; 0xd9e <__fp_splitA>
 dbc:	08 c0       	rjmp	.+16     	; 0xdce <__fp_splitA+0x30>
 dbe:	16 16       	cp	r1, r22
 dc0:	17 06       	cpc	r1, r23
 dc2:	18 06       	cpc	r1, r24
 dc4:	99 1f       	adc	r25, r25
 dc6:	f1 cf       	rjmp	.-30     	; 0xdaa <__fp_splitA+0xc>
 dc8:	86 95       	lsr	r24
 dca:	71 05       	cpc	r23, r1
 dcc:	61 05       	cpc	r22, r1
 dce:	08 94       	sec
 dd0:	08 95       	ret

00000dd2 <__fp_zero>:
 dd2:	e8 94       	clt

00000dd4 <__fp_szero>:
 dd4:	bb 27       	eor	r27, r27
 dd6:	66 27       	eor	r22, r22
 dd8:	77 27       	eor	r23, r23
 dda:	cb 01       	movw	r24, r22
 ddc:	97 f9       	bld	r25, 7
 dde:	08 95       	ret

00000de0 <__gesf2>:
 de0:	8a df       	rcall	.-236    	; 0xcf6 <__fp_cmp>
 de2:	08 f4       	brcc	.+2      	; 0xde6 <__gesf2+0x6>
 de4:	8f ef       	ldi	r24, 0xFF	; 255
 de6:	08 95       	ret

00000de8 <__mulsf3>:
 de8:	0a d0       	rcall	.+20     	; 0xdfe <__mulsf3x>
 dea:	c0 cf       	rjmp	.-128    	; 0xd6c <__fp_round>
 dec:	b1 df       	rcall	.-158    	; 0xd50 <__fp_pscA>
 dee:	28 f0       	brcs	.+10     	; 0xdfa <__mulsf3+0x12>
 df0:	b6 df       	rcall	.-148    	; 0xd5e <__fp_pscB>
 df2:	18 f0       	brcs	.+6      	; 0xdfa <__mulsf3+0x12>
 df4:	95 23       	and	r25, r21
 df6:	09 f0       	breq	.+2      	; 0xdfa <__mulsf3+0x12>
 df8:	a2 cf       	rjmp	.-188    	; 0xd3e <__fp_inf>
 dfa:	a7 cf       	rjmp	.-178    	; 0xd4a <__fp_nan>
 dfc:	eb cf       	rjmp	.-42     	; 0xdd4 <__fp_szero>

00000dfe <__mulsf3x>:
 dfe:	c7 df       	rcall	.-114    	; 0xd8e <__fp_split3>
 e00:	a8 f3       	brcs	.-22     	; 0xdec <__mulsf3+0x4>

00000e02 <__mulsf3_pse>:
 e02:	99 23       	and	r25, r25
 e04:	d9 f3       	breq	.-10     	; 0xdfc <__mulsf3+0x14>
 e06:	55 23       	and	r21, r21
 e08:	c9 f3       	breq	.-14     	; 0xdfc <__mulsf3+0x14>
 e0a:	95 0f       	add	r25, r21
 e0c:	50 e0       	ldi	r21, 0x00	; 0
 e0e:	55 1f       	adc	r21, r21
 e10:	aa 27       	eor	r26, r26
 e12:	ee 27       	eor	r30, r30
 e14:	ff 27       	eor	r31, r31
 e16:	bb 27       	eor	r27, r27
 e18:	00 24       	eor	r0, r0
 e1a:	08 94       	sec
 e1c:	67 95       	ror	r22
 e1e:	20 f4       	brcc	.+8      	; 0xe28 <__mulsf3_pse+0x26>
 e20:	e2 0f       	add	r30, r18
 e22:	f3 1f       	adc	r31, r19
 e24:	b4 1f       	adc	r27, r20
 e26:	0a 1e       	adc	r0, r26
 e28:	22 0f       	add	r18, r18
 e2a:	33 1f       	adc	r19, r19
 e2c:	44 1f       	adc	r20, r20
 e2e:	aa 1f       	adc	r26, r26
 e30:	66 95       	lsr	r22
 e32:	a9 f7       	brne	.-22     	; 0xe1e <__mulsf3_pse+0x1c>
 e34:	77 95       	ror	r23
 e36:	30 f4       	brcc	.+12     	; 0xe44 <__mulsf3_pse+0x42>
 e38:	f3 0f       	add	r31, r19
 e3a:	b4 1f       	adc	r27, r20
 e3c:	0a 1e       	adc	r0, r26
 e3e:	12 1e       	adc	r1, r18
 e40:	08 f4       	brcc	.+2      	; 0xe44 <__mulsf3_pse+0x42>
 e42:	63 95       	inc	r22
 e44:	33 0f       	add	r19, r19
 e46:	44 1f       	adc	r20, r20
 e48:	aa 1f       	adc	r26, r26
 e4a:	22 1f       	adc	r18, r18
 e4c:	76 95       	lsr	r23
 e4e:	99 f7       	brne	.-26     	; 0xe36 <__mulsf3_pse+0x34>
 e50:	87 95       	ror	r24
 e52:	20 f4       	brcc	.+8      	; 0xe5c <__mulsf3_pse+0x5a>
 e54:	b4 0f       	add	r27, r20
 e56:	0a 1e       	adc	r0, r26
 e58:	12 1e       	adc	r1, r18
 e5a:	63 1f       	adc	r22, r19
 e5c:	44 0f       	add	r20, r20
 e5e:	aa 1f       	adc	r26, r26
 e60:	22 1f       	adc	r18, r18
 e62:	33 1f       	adc	r19, r19
 e64:	86 95       	lsr	r24
 e66:	a9 f7       	brne	.-22     	; 0xe52 <__mulsf3_pse+0x50>
 e68:	86 2f       	mov	r24, r22
 e6a:	71 2d       	mov	r23, r1
 e6c:	60 2d       	mov	r22, r0
 e6e:	11 24       	eor	r1, r1
 e70:	9f 57       	subi	r25, 0x7F	; 127
 e72:	50 40       	sbci	r21, 0x00	; 0
 e74:	8a f0       	brmi	.+34     	; 0xe98 <__mulsf3_pse+0x96>
 e76:	e1 f0       	breq	.+56     	; 0xeb0 <__mulsf3_pse+0xae>
 e78:	88 23       	and	r24, r24
 e7a:	4a f0       	brmi	.+18     	; 0xe8e <__mulsf3_pse+0x8c>
 e7c:	ee 0f       	add	r30, r30
 e7e:	ff 1f       	adc	r31, r31
 e80:	bb 1f       	adc	r27, r27
 e82:	66 1f       	adc	r22, r22
 e84:	77 1f       	adc	r23, r23
 e86:	88 1f       	adc	r24, r24
 e88:	91 50       	subi	r25, 0x01	; 1
 e8a:	50 40       	sbci	r21, 0x00	; 0
 e8c:	a9 f7       	brne	.-22     	; 0xe78 <__mulsf3_pse+0x76>
 e8e:	9e 3f       	cpi	r25, 0xFE	; 254
 e90:	51 05       	cpc	r21, r1
 e92:	70 f0       	brcs	.+28     	; 0xeb0 <__mulsf3_pse+0xae>
 e94:	54 cf       	rjmp	.-344    	; 0xd3e <__fp_inf>
 e96:	9e cf       	rjmp	.-196    	; 0xdd4 <__fp_szero>
 e98:	5f 3f       	cpi	r21, 0xFF	; 255
 e9a:	ec f3       	brlt	.-6      	; 0xe96 <__mulsf3_pse+0x94>
 e9c:	98 3e       	cpi	r25, 0xE8	; 232
 e9e:	dc f3       	brlt	.-10     	; 0xe96 <__mulsf3_pse+0x94>
 ea0:	86 95       	lsr	r24
 ea2:	77 95       	ror	r23
 ea4:	67 95       	ror	r22
 ea6:	b7 95       	ror	r27
 ea8:	f7 95       	ror	r31
 eaa:	e7 95       	ror	r30
 eac:	9f 5f       	subi	r25, 0xFF	; 255
 eae:	c1 f7       	brne	.-16     	; 0xea0 <__mulsf3_pse+0x9e>
 eb0:	fe 2b       	or	r31, r30
 eb2:	88 0f       	add	r24, r24
 eb4:	91 1d       	adc	r25, r1
 eb6:	96 95       	lsr	r25
 eb8:	87 95       	ror	r24
 eba:	97 f9       	bld	r25, 7
 ebc:	08 95       	ret

00000ebe <_exit>:
 ebe:	f8 94       	cli

00000ec0 <__stop_program>:
 ec0:	ff cf       	rjmp	.-2      	; 0xec0 <__stop_program>
